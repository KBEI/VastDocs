{"/VastDocs/document/en/VastAdapters.html": {"title": "", "content": "<h1 align=\"center\">VastAdapter</h1>\n\n## üí´ Characteristics\n\n- üëç Supports Normal or DataBinding\n- üëç Support multiple data types\n- üëç Supports defining generic click events and defining item click events individually\n- üëç Support defining click and long press events\n- üëç Support rapid addition of new data types"}, "/VastDocs/document/en/VastNetState.html": {"title": "", "content": "<!--  --><h1 align=\"center\">VastNetStateLayout</h1>\n\n<p align=\"center\">VastNetStateLayout extends Framelayout. You can customize the following status pages: loading,error,ok,empty data.</p>\n\n## üí´ Characteristics\n\n- üëç Support four custom status pages `loading loading page` `empty data empty data page` `net error network error page` `retry retry interface`\n- üëç Support custom retry or network error event\n- üëç Use `VastNetStateMgr` for pages management\n- üëç Set with default page\n\n<div align=\"center\">\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9a3bb6a2bc34b8ab4d846786045c9e0~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c950258361404f13ba76ce8393a30eab~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/910d7acfe764488bb03d87b45359608c~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa7a12ba7d04449882f9073973dbbcd8~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n</div>"}, "/VastDocs/document/en/DensityUtils.html": {"title": "DensityUtils", "content": "# DensityUtils\n\nDimension tools provide you with some basic mutual conversion between dimensions. For more information about dimensions, you can click [Dimension](https://developer.android.google.cn/guide/topics/resources/more-resources?hl=zh-cn#Dimension) to find out.\n\n## Conversion between PX and DP\n\nfor example:\n\n```kotlin\nval dpValue = DensityUtils.px2dp(10f)\n\nval pxValue = DensityUtils.dp2px(10f)\n```\n\n## Conversion between SP and PX\n\nfor example:\n\n```kotlin\nval spValue = DensityUtils.px2sp(10f)\n\nval pxValue = DensityUtils.sp2px(10f)\n```\n\n## Conversion between SP and DP\n\nfor example:\n\n```kotlin\nval spValue = DensityUtils.dp2sp(10f)\n\nval dpValue = DensityUtils.sp2dp(10f)\n```\n\n## Convert DP or SP to float\n\nfor example:\n\n```kotlin\nval spValue = 10f.sp\n\nval dpValue = 10f.dp\n```"}, "/VastDocs/document/en/LogUtils.html": {"title": "LogUtils", "content": "# LogUtils\n\n## Quick start\n\nBefore starting, you need to know whether the current application is in debug.\n\n```kotlin\n// this is important and required\nLogUtils.syncIsDeBug(this)\n```\n\nHere's how to print a **info** message\n\n```kotlin\nLogUtils.i(this.javaClass.simpleName,\"Hello,This is a info\")\n```\n\nLet's take a look at the running results\n\n```kotlin\n2022-02-08 21:34:48.024 9643-9643/com.gcode.vastutils I/class¬†(MainActivity.kt:51): method: onCreate() key: MainActivity content: Hello,This is a info\n```\n\n**By default**ÔºåIt shows the location of the print log `MainActivity.kt:51` Ôºåwhere to print the log `method: onCreate()` Ôºåkeyword`key: MainActivity` Ôºåand printed information `content: Hello,This is a info`.\n\n## Customize what to print\n\n`LogUtils`  provides an interface so that you can customize the format of content to be printedÔºåfor example:\n\n```kotlin\n// customize the format of content to be printed\nLogUtils.setLogContentFormat(object : LogUtils.LogContent {\n    override fun logContentFormat(methodName: String?, key: String?, content: String?): String {\n        return \"$methodName() $key $content\"\n    }\n})\n// Print log\nLogUtils.i(this.javaClass.simpleName,\"Hello,This is a info\")\n```\n\nresult:\n\n```kotlin\n2022-02-08 23:29:48.359 2836-2836/com.gcode.vastutils I/class¬†(MainActivity.kt:46): onCreate() MainActivity Hello,This is a info\n```\n\n## Printing super long text content is supported\n\n`LogUtils` allows you to print super long content freely without restriction\n\n```kotlin\nvar str = \"\"\nrepeat(2000){\n    str += it.toString()\n}\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\nPrint results:\n\n```kotlin\n2022-02-08 23:39:21.056 17753-17753/com.gcode.vastutils I/class¬†(MainActivity.kt:45): method: onCreate() key: MainActivity content: 01234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000100110021003100410051006100710081009101010111012101310141015101610171018101910201021102210231024102510261027102810291030103110321033103410351036103710381039104010411042104310441045104610471048104910501051105210531054105510561057105810591060106110621063106410651066106710681069107010711072107310741075107610771078107910801081108210831084108510861087108810891090109110921093109410951096109710981099110011011102110311041105110611071108110911101111111211131114111511161117111811191120112111221123112411251126112711281129113011311132113311341135113611371138113911401141114211431144114511461147114811491150115111521153115411551156115711581159116011611162116311641165116611671168116911701171117211731174117511761177117811791180118111821183118411851186118711881189119011911192119311941195119611971198119912001201120212031204120512061207120812091210121112121213121412151216121712181219122012211222122312241225122612271228122912301231123212331234123512361237123812391240124112421243124412451246124712481249125012511252125312541255125612571258125912601261126212631264126\n2022-02-08 23:39:21.057 17753-17753/com.gcode.vastutils I/class¬†(MainActivity.kt:45): 51266126712681269127012711272127312741275127612771278127912801281128212831284128512861287128812891290129112921293129412951296129712981299\n```\n\n## Set the character length of a single log print\n\nFirst, we print by default (the maximum length of **characters **  printed at one time is **1000**)\n\n```kotlin\nvar str = \"\"\nrepeat(800){\n    str += it.toString()\n}\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\nThe operation results are as follows:\n\n```kotlin\n2022-02-09 10:50:26.848 4035-4035/com.gcode.vastutils I/class¬†(MainActivity.kt:45): method: onCreate() key: MainActivity content: 0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799\n```\n\nThen, at this time, we set the maximum print length of each time to 200\n\n```kotlin\nvar str = \"\"\nrepeat(800){\n    str += it.toString()\n}\nLogUtils.setOnceByteLength(200) // Set the maximum print length to 200 each time\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\nThe result of this operation is:\n\n```kotlin\n2022-02-09 11:53:37.267 22764-22764/com.gcode.vastutils I/class¬†(MainActivity.kt:46): method: onCreate() key: MainActivity content: 012345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628\n2022-02-09 11:53:37.267 22764-22764/com.gcode.vastutils I/class¬†(MainActivity.kt:46): 7288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553\n2022-02-09 11:53:37.268 22764-22764/com.gcode.vastutils I/class¬†(MainActivity.kt:46): 554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799\n```\n\n## Set the maximum number of times to print\n\nWe are still based on the above example and set to print up to two logs\n\n```kotlin\nvar str = \"\"\nrepeat(800){\n    str += it.toString()\n}\nLogUtils.setMaxPrintTimes(2) // Set to print up to two lines\nLogUtils.setOnceByteLength(200) // Set the maximum print length to 200 each time\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\nOnly two of the three lines are printed\n\n```kotlin\n2022-02-09 12:12:36.433 3710-3710/com.gcode.vastutils I/class¬†(MainActivity.kt:47): method: onCreate() key: MainActivity content: 012345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628\n2022-02-09 12:12:36.434 3710-3710/com.gcode.vastutils I/class¬†(MainActivity.kt:47): 7288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553\n```"}, "/VastDocs/document/en/VastBaseFragment.html": {"title": "VastBaseFragment", "content": "# VastBaseFragment\n\n`VastBaseFragment` is based on [Fragment](https://developer.android.com/reference/androidx/fragment/app/Fragment.html) for encapsulation, and based on `VastBaseFragment` for secondary encapsulation, as shown in the figure :\n\n<div align=\"center\"><img src=\"../assets/images/vbf.png\"></div>\n\n## Quick start\n\nWe use `VastVbVmFragment` as an example to show you how to add it to your project:\n\n```kotlin\nclass BaseVbFragment(override val layoutId: Int = 0) : VastVbVmFragment<FragmentBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        mBinding.tv.setOnClickListener {\n            ... //click event\n        }\n    }\n\n}\n```\n\nNote that in this case you only need to set `layoutId` to the default value of 0.\n\nOf course, if you don't use [ViewBinding](https://developer.android.com/topic/libraries/view-binding?hl=zh-cn) in your project, you can inherit `VastVmFragment`, in this case you `layoutId` needs to be set to the corresponding layout id, for example:\n\n```kotlin\nclass BaseVmFragment(override val layoutId: Int = R.layout.fragment_base_vm) :VastVmActivity<BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        ... //Something to do\n    }\n\n}\n```"}, "/VastDocs/document/en/VastBindAdapter.html": {"title": "VastBindAdapter", "content": "# VastBindAdapter\n\n## Quick start\n\nThrough the following example, you can quickly apply `BaseVastBindAdapter` to your project\n\n### Implement VastBindAdapterItem\n\nMake sure that data class to implement the `VastBindAdapterItem` . Let's take a look at the `Person` and `Picture` .\n\n```kotlin\n// Use in kotlin\nclass Person(\n    val firstName: String, val lastName: String,\n    var vbAdpClickEventListener: VAapClickEventListener? = null,\n    var vbAdpLongClickEventListener: VAdpLongClickEventListener? = null,\n) :VastBindAdapterItem {\n\n    override fun setVBAapClickEventListener(l: VAapClickEventListener?) {\n        vbAdpClickEventListener = l\n    }\n\n    override fun getVBAapClickEventListener(): VAapClickEventListener? {\n        return vbAdpClickEventListener\n    }\n\n    override fun setVBAdpLongClickEventListener(l: VAdpLongClickEventListener?) {\n        vbAdpLongClickEventListener = l\n    }\n\n    override fun getVBAdpLongClickEventListener(): VAdpLongClickEventListener? {\n        return vbAdpLongClickEventListener\n    }\n\n    override fun getVBAdpItemType(): Int {\n        return R.layout.item_bind_textview\n    }\n\n}\n```\n\n```java\n// Use in java\npublic class Picture implements VastBindAdapterItem {\n\n    private int drawable;\n    private VAapClickEventListener clickEventListener;\n    private VAdpLongClickEventListener longClickEventListener;\n\n    public Picture(int drawable, VAapClickEventListener clickEventListener, VAdpLongClickEventListener longClickEventListener) {\n        this.drawable = drawable;\n        this.clickEventListener = clickEventListener;\n        this.longClickEventListener = longClickEventListener;\n    }\n\n    public int getDrawable() {\n        return drawable;\n    }\n\n    public void setDrawable(int drawable) {\n        this.drawable = drawable;\n    }\n    \n    @Override\n    public int getVBAdpItemType() {\n        return R.layout.item_bind_imageview;\n    }\n\n    @Override\n    public void setVBAapClickEventListener(@Nullable VAapClickEventListener l) {\n        clickEventListener = l;\n    }\n\n    @Nullable\n    @Override\n    public VAapClickEventListener getVBAapClickEventListener() {\n        return clickEventListener;\n    }\n\n    @Override\n    public void setVBAdpLongClickEventListener(@Nullable VAdpLongClickEventListener l) {\n        longClickEventListener = l;\n    }\n\n    @Nullable\n    @Override\n    public VAdpLongClickEventListener getVBAdpLongClickEventListener() {\n        return longClickEventListener;\n    }\n}\n```\n\n### Layout\n\nFor elements in the same list, when you bind them into the corresponding layout using the `data` tag, their `name` fields should be the same.\n\nFor example: `Person` and `Picture` are in the same list, and their `name` fields in their layout files are both `item` .\n\n```xml\n// Person layout\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <data>\n        <variable\n            name=\"item\"\n            type=\"com.gcode.vastutils.basebindadpexample.model.Person\" />\n    </data>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"center\"\n            android:text=\"@{item.firstName}\"/>\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"center\"\n            android:text=\"@{item.lastName}\"/>\n    </LinearLayout>\n</layout>\n```\n\n```xml\n// Picture layout\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <data>\n        <variable\n            name=\"item\"\n            type=\"com.gcode.vastutils.basebindadpexample.model.Picture\" />\n    </data>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n        <ImageView\n            android:id=\"@+id/item_image\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"100dp\"\n            android:src=\"@{item.drawable}\"\n            android:contentDescription=\"@string/picture\"\n            android:layout_gravity=\"center_horizontal\"/>\n    </LinearLayout>\n</layout>\n```\n\n### Adapter\n\nMake sure that the adapter implements `BaseVastBindAdapter`\n\n```kotlin\n// Use in kotlin\nclass BaseBindingAdapter(\n    private val dataSource:MutableList<VastBindAdapterItem>\n):BaseVastBindAdapter(dataSource){\n\n    override fun setVariableId(): Int {\n        return BR.item\n    }\n\n}\n```\n\n```java\n// Use in java\npublic class BaseBindAdapter extends VastBindAdapter {\n    public BaseBindAdapter(@NonNull List<VastBindAdapterItem> dataSource) {\n        super(dataSource);\n    }\n\n    @Override\n    public int setVariableId() {\n        return BR.item;\n    }\n}\n```\n\n- Use in  Activity\n\n```kotlin\n// Use in kotlin\nprivate val datas:MutableList<VastBindAdapterItem> = ArrayList()\n\nfor(i in 0..10){\n    datas.add(Person(i.toString(),i.toString(),null,null))\n    datas.add(Picture(R.drawable.ic_knots,null,null))\n}\n\n// Set to RecyclerView\nval adapter = BaseBindingAdapter(datas)\ndataRv.adapter = adapter\ndataRv.layoutManager = LinearLayoutManager(this)\n```\n\n```java\n// Use in java\nprivate ArrayList<VastBindAdapterItem> datas = new ArrayList<>();\n\nfor (int i = 0; i < 10; i++) {\n    datas.add(new Picture(R.drawable.ic_knots, null, null));\n}\n\n// ËÆæÁΩÆÁªôRecyclerView\nBaseBindAdapter adapter = new BaseBindAdapter(datas);\ndataRv.setAdapter(adapter);\ndataRv.setLayoutManager(new LinearLayoutManager(this));\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapter.gif\" width=30%/></div>\n\n## Add click (or long press) event\n\nFor lists, click events are essential. `VastBindAdapter` supports you to set generic click events for lists. Of course, because your class implements the `VastBindAdapterItem` interface, you can also set click events for them individually.\n\n### Generic click event settings\n\n```kotlin\n// Use in kotlin\nadapter.setOnItemClickListener(object :VastBindAdapter.OnItemClickListener{\n            override fun onItemClick(view: View, position: Int) {\n                // Something you want to do\n            }\n        })\nadapter.setOnItemLongClickListener(object :VastBindAdapter.OnItemLongClickListener{\n            override fun onItemLongClick(view: View, position: Int): Boolean {\n                // Something you want to do\n                return true\n            }\n        })\n```\n\n```java\n// Use in java\nadapter.setOnItemClickListener((view, position) -> {\n            // Something you want to do\n        });\nadapter.setOnItemLongClickListener((view, position) -> {\n            // Something you want to do\n            return true;\n        });\n```\n\n### Set up individual click events\n\nNote that if you define a click event for an item, it no longer supports generic click events.\n\n```kotlin\n// Use in kotlin\nval click = object :VAapClickEventListener{\n    override fun vAapClickEvent(view: View, pos: Int) {\n        showShortMsg(\"Hello,User.And position is $pos\")\n    }\n}\n\nfor(i in 0..10){\n    datas.add(Person(i.toString(),i.toString(),click,null))\n    datas.add(Picture(R.drawable.ic_knots,null,longClick))\n}\n```\n\n```java\n// Use in java\nVAapClickEventListener click = (view, pos) -> {\n    ToastUtils.showShortMsg(this,\"Hello\");\n};\n\n// Âú®ËÆæÁΩÆÊï∞ÊçÆÊ∫êÁöÑÊó∂ÂÄôËÆæÁΩÆ\nfor (int i = 0; i < 10; i++) {\n    datas.add(new Picture(R.drawable.ic_knots, click, null));\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapterClick.gif\" width=30%/></div>\n\n## Add additional features to the  Adapter\n\nThe following example shows you how to add the function of judging whether the data source is empty to the Adapter\n\n```kotlin\n// Use in kotlin\nclass BaseBindingAdapter(\n    private val dataSource:MutableList<VastBindAdapterItem>\n):BaseVastBindAdapter(dataSource) {\n\n    /**\n     * Returns true if the collection is empty (does not contain any elements), otherwise false.\n     * @return Boolean\n     */\n    fun isItemEmpty() = items.isEmpty()\n\n    override fun setVariableId(): Int {\n        return BR.item\n    }\n\n}\n```\n\n```java\n// Use in java\npublic class BaseBindAdapter extends VastBindAdapter {\n    private ArrayList<VastBindAdapterItem> datas;\n\n    public BaseBindAdapter(@NonNull List<VastBindAdapterItem> dataSource) {\n        super(dataSource);\n        datas.addAll(dataSource);\n    }\n\n    @Override\n    public int setVariableId() {\n        return BR.item;\n    }\n\n    public Boolean isEmpty(){\n        return datas.isEmpty();\n    }\n\n}\n```\n\nOf course, you can also refer to the example application\n\n## Binding adapters\n\nWhen using DataBinding, sometimes we need to customize some content. The following example shows you how to use `@BindingAdapter` in `VastBindAdapter`.\n\nPlease click [Binding adapters](https://developer.android.google.cn/topic/libraries/data-binding/binding-adapters) to learn more about binding adapters.\n\n```kotlin\n// Use in kotlin\nclass BaseBindingAdapter(\n    private val dataSource:MutableList<VastBindAdapterItem>\n):BaseVastBindAdapter(dataSource) {\n    companion object {\n        @JvmStatic @BindingAdapter(\"android:src\")\n        fun setImageUri(view: ImageView, imageUri: String?) {\n            if (imageUri == null) {\n                view.setImageURI(null)\n            } else {\n                view.setImageURI(Uri.parse(imageUri))\n            }\n        }\n    }\n\n    override fun setVariableId(): Int {\n        return BR.item\n    }\n\n}\n```\n\n```java\n// Use in java\npublic class BaseBindAdapter extends VastBindAdapter {\n\n    @BindingAdapter(\"drawableStartCompat\")\n    public static void loadImage(TextView tv, int resId) {\n        Drawable drawable = ResourcesCompat.getDrawable(App.context.getResources(),resId,null);\n        tv.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);\n    }\n    \n    private ArrayList<VastBindAdapterItem> datas;\n\n    public BaseBindAdapter(@NonNull List<VastBindAdapterItem> dataSource) {\n        super(dataSource);\n        datas.addAll(dataSource);\n    }\n\n    @Override\n    public int setVariableId() {\n        return BR.item;\n    }\n\n    public Boolean isEmpty(){\n        return datas.isEmpty();\n    }\n\n}\n```"}, "/VastDocs/document/en/SystemUtils.html": {"title": "SystemUtils", "content": "# SystemUtils\n\n`Systemutils` provides you with some methods to get system information.\n\n## Get system language\n\n```kotlin\nLogUtils.i(\"VU\", systemLanguage)\n```\n\n```kotlin\n2022-02-10 22:06:24.272 24641-24641/com.gcode.vastutils I/class¬†(MainActivity.kt:52): zh\n```\n\n## Return an array of all installed locales\n\n```kotlin\nfor(locale in systemLanguageList){\n    // to do something\n}\n```\n\n## Return the Android version of the system\n\n```kotlin\nLogUtils.i(\"VU\", systemAndroidVersion)\n```\n\n```kotlin\n2022-02-10 22:12:03.397 29894-29894/com.gcode.vastutils I/class¬†(MainActivity.kt:52): 12\n```\n\n## Return the end user visible name of the end product\n\n```kotlin\n// This device is redmi K40\n2022-02-10 22:15:53.820 4584-4584/com.gcode.vastutils I/class¬†(MainActivity.kt:52): M2012K11AC\n```\n\n## Returns the consumer visible brand (if any) associated with the product / hardware\n\n```kotlin\nLogUtils.i(\"VU\", deviceBrand)\n```\n\n```kotlin\n2022-02-10 22:17:47.494 6086-6086/com.gcode.vastutils I/class¬†(MainActivity.kt:52): Redmi\n```"}, "/VastDocs/document/en/ColorUtils.html": {"title": "ColorUtils", "content": "# ColorUtils\n\n`ColorUtils` provides you with conversion methods between different Color formats\n\n## Color hexadecimal string convert to int\n\n```kotlin\nval colorInt = colorHex2Int(\"#12c2e9\")\n```\n\n## Color hexadecimal string convert to an array of RGB\n\nFor example,it will convert **#12c2e9** to **{18,194,233}**\n\n```kotlin\nval rgb:IntArray = colorHex2RGB(\"#12c2e9\")\n```\n\n## Color int convert to hexadecimal string\n\n```kotlin\nval colorHex:String = colorInt2Hex(-15547671)\n```\n\n## Color int convert to an array of RGB\n\n```kotlin\nval rgb:IntArray = colorInt2RGB(-15547671)\n```\n\n## An array of RGB convert to color hexadecimal string\n\nFor example,it will convert **{63,226,197}** to **#3FE2C5**\n\n```kotlin\nval colorHex:String = colorRGB2Hex(intArrayOf(63,226,197))\n```\n\n## An array of RGB convert to color int.\n\n```kotlin\nval colorHex:Int = colorRGB2Int(intArrayOf(63,226,197))\n```"}, "/VastDocs/document/en/IDCardUtils.html": {"title": "IDCardUtils", "content": "# IDCardUtils\n\n`IDCardUtils` is used to verify the correctness of the Chinese resident ID card number locally. The usage method is as follows:\n\n```kotlin\nIDCardValidate(\"123456789101112131\")\n```\n\nHere are possible errorÔºö\n\n1Ô∏è‚É£ The length of the ID number is not 15 or 18 digits.\n2Ô∏è‚É£ The 15-digit ID number is not all digits; the 18-digit number is not all digits except the last digit.\n3Ô∏è‚É£ The birthday of the ID card is invalid.\n4Ô∏è‚É£ The birthday of the ID card is not valid.\n5Ô∏è‚É£ The month of the ID card is invalid.\n6Ô∏è‚É£ The date of the ID card is invalid.\n7Ô∏è‚É£ The ID card area code is wrong."}, "/VastDocs/document/en/VastSkin.html": {"title": "VastSkin", "content": "# VastSkin\n\n`VastSkin` is a non-intrusive skinning framework based on the replacement [LayoutInflater.Factory2](https://developer.android.com/reference/android/view/LayoutInflater.Factory2)\n\n## Quick start\n\n### Register Application\n\n```xml\n<application\n        android:name=\"com.gcode.vasttools.base.VastApp\"\n        ...>\n</application>\n```\n\nIf you need to set up your own Application, make sure it inherits from `VastApp`\n\n### Loading skin resource\n\n```kotlin\n// Use in kotlin\nVastSkinManager.loadSkin(\"data/data/com.gcode.vastutils/files/darkskin-debug.apk\")\n```\n\n```java\n// Use in java\nVastSkinManager.INSTANCE.loadSkin(\"data/data/com.gcode.vastutils/files/darkskin-debug.apk\");\n```\n\nYes, it's that simple!\n\n## Support src tag\n\nCurrently `VastSkin` supports replacing the following resources:\n\n```kotlin\ninternal const val CHANGEABLY_BACKGROUND = \"background\"\ninternal const val CHANGEABLY_SRC = \"src\"\ninternal const val CHANGEABLY_TEXT_COLOR = \"textColor\"\ninternal const val CHANGEABLY_DRAWABLE_LEFT = \"drawableLeft\"\ninternal const val CHANGEABLY_DRAWABLE_TOP = \"drawableTop\"\ninternal const val CHANGEABLY_DRAWABLE_RIGHT = \"drawableRight\"\ninternal const val CHANGEABLY_DRAWABLE_BOTTOM = \"drawableBottom\"\n```"}, "/VastDocs/document/en/AppUtils.html": {"title": "AppInfoUtils", "content": "# AppInfoUtils\n\n## Get app package name\n\nfor example:\n\n```kotlin\nLog.i(\"VU\",getPackageName(this)?: \"\")\n```\n\nresult:\n\n```\n2022-02-08 12:15:42.888 28668-28668/com.gcode.vastutils I/VU: com.gcode.vastutils\n```\n\n## Get the application name\n\nfor example:\n\n```kotlin\nLog.i(\"VU\",getAppName(this)?: \"\")\n```\n\nresult:\n\n```\n2022-02-08 12:16:34.509 29223-29223/com.gcode.vastutils I/VU: VastUtilsSampleDemo\n```\n\n\n\n## Get version name\n\nfor example:\n\n```kotlin\nLog.i(\"VU\",getVersionName(this)?: \"\")\n```\n\nresult:\n\n```\n2022-02-08 12:21:32.561 586-586/com.gcode.vastutils I/VU: 1.0\n```\n\n## Get version number\n\nfor example:\n\n```kotlin\nLog.i(\"VU\", getVersionCode(this).toString())\n```\n\nresult:\n\n```\n2022-02-08 12:24:11.924 6275-6275/com.gcode.vastutils I/VU: 1\n```\n\n## Determine whether the application is in debug state\n\nfor example:\n\n```kotlin\nLog.i(\"VU\", getAppDebug(this).toString())\n```\n\nresult:\n\n```\n2022-02-08 12:24:48.678 7578-7578/com.gcode.vastutils I/VU: true\n```\n\n## Get app Icon\n\n```kotlin\n// ivI is an ImageView control\niv.setImageBitmap(getAppBitmap(this))\n```\n\n## Configuration of build. Gradle \n\n```groovy\ndefaultConfig {\n  applicationId \"com.gcode.vastutils\"\n  ... //sdk version\n  versionCode 1\n  versionName \"1.0\"\n\n  testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n}\n```"}, "/VastDocs/document/en/ScreenSizeUtils.html": {"title": "ScreenSizeUtils", "content": "# ScreenSizeUtils\n\nScreensizeutils provides you with ways to get the length and width of the screen, such asÔºö\n\n```kotlin\nLogUtils.i(\"VU\",\"${getMobileScreenWidth()} ${getMobileScreenHeight()}\")\n```\n\nresult:\n\n```kotlin\n2022-02-10 21:47:37.265 4463-4463/com.gcode.vastutils I/class¬†(MainActivity.kt:43): method: onCreate() key: VU content: 1080 2340\n```"}, "/VastDocs/document/en/VastAdapter.html": {"title": "VastAdapter", "content": "# VastAdapter\n\n> If possible, it is recommended to use `VastBindingAdapter`\n\n## Quick start\n\nThrough the following example,  you can quickly apply `BaseVastAdapter` to your project\n\n### Implement VastAdapterItem\n\n- First, we need your data class to implement the `VastAdapterItem` interface,Let's take `AExample` and `BExample` as examples.\n\n```kotlin\n// Vaapclickevent is your custom click event\n// Vadplongclickevent is your custom long click event\n// The return value of getvadpitemtype method should be the same as the corresponding VH\nclass AExample(\n    val data: String,\n    var clickEventListener: VAapClickEventListener?,\n    var longClickEventListener: VAdpLongClickEventListener?,\n):VastAdapterItem {\n\n    override fun setVAapClickEventListener(l: VAapClickEventListener?) {\n        clickEventListener = l\n    }\n\n    override fun getVAapClickEventListener(): VAapClickEventListener? {\n        return clickEventListener\n    }\n\n    override fun setVAdpLongClickEventListener(l: VAdpLongClickEventListener?) {\n        longClickEventListener = l\n    }\n\n    override fun getVAdpLongClickEventListener(): VAdpLongClickEventListener? {\n        return longClickEventListener\n    }\n\n    override fun getVAdpItemType(): String {\n        return \"person\"\n    }\n}\n\nclass BExample(\n    val drawable:Int,\n    var clickEventListener: VAapClickEventListener?,\n    var longClickEventListener: VAdpLongClickEventListener?\n) : VastAdapterItem {\n\n    override fun setVAapClickEventListener(l: VAapClickEventListener?) {\n        clickEventListener = l\n    }\n\n    override fun getVAapClickEventListener(): VAapClickEventListener? {\n        return clickEventListener\n    }\n\n    override fun setVAdpLongClickEventListener(l: VAdpLongClickEventListener?) {\n        longClickEventListener = l\n    }\n\n    override fun getVAdpLongClickEventListener(): VAdpLongClickEventListener? {\n        return longClickEventListener\n    }\n\n    override fun getVAdpItemType(): String {\n        return \"picture\"\n    }\n}\n```\n\n### ËÆæÁΩÆÂØπÂ∫îÁöÑViewHolderÔºåViewHolderÈúÄË¶ÅÁªßÊâøËá™BaseVastAdapterVH\n\n```kotlin\n// AExampleÂØπÂ∫îÁöÑVH\nclass AViewHolder(itemView: View): BaseVastAdapterVH(itemView) {\n    private val tv:TextView\n\n    override fun onBindData(item: VastAdapterItem) {\n        super.onBindData(item)\n        tv.text = (item as AExample).data\n    }\n\n    class Factory:BVAdpVHFactory{\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseVastAdapterVH {\n            return AViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_textview,parent,false))\n        }\n\n        override fun getVAdpVHType(): String {\n            return \"person\" // ÂíåItemÁõ∏‰∏ÄËá¥\n        }\n    }\n\n    init {\n        tv = itemView.findViewById(R.id.text)\n    }\n}\n\n// BExampleÂØπÂ∫îÁöÑVH\nclass BViewHolder(itemView: View) : BaseVastAdapterVH(itemView) {\n\n    private val iv: ImageView\n\n    override fun onBindData(item: VastAdapterItem) {\n        super.onBindData(item)\n        iv.setImageResource((item as BExample).drawable)\n    }\n\n    class Factory : BVAdpVHFactory {\n\n        override fun onCreateViewHolder(\n            parent: ViewGroup,\n            viewType: Int\n        ): BaseVastAdapterVH {\n            val inflater = LayoutInflater.from(parent.context)\n            val itemView: View = inflater.inflate(R.layout.item_imageview, parent, false)\n            return BViewHolder(itemView)\n        }\n\n        override fun getVAdpVHType(): String {\n            return \"picture\"\n        }\n\n    }\n\n    init {\n        iv = itemView.findViewById(R.id.item_image)\n    }\n}\n```\n\n### Build ViewHolder\n\n```kotlin\n// VH corresponding to AExample\nclass AViewHolder(itemView: View): BaseVastAdapterVH(itemView) {\n    private val tv:TextView\n\n    override fun onBindData(item: VastAdapterItem) {\n        super.onBindData(item)\n        tv.text = (item as AExample).data\n    }\n\n    class Factory:BVAdpVHFactory{\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseVastAdapterVH {\n            return AViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_textview,parent,false))\n        }\n\n        override fun getVAdpVHType(): String {\n            return \"person\" // Consistent with Item\n        }\n    }\n\n    init {\n        tv = itemView.findViewById(R.id.text)\n    }\n}\n\n//VH corresponding to BExample\nclass BViewHolder(itemView: View) : BaseVastAdapterVH(itemView) {\n\n    private val iv: ImageView\n\n    override fun onBindData(item: VastAdapterItem) {\n        super.onBindData(item)\n        iv.setImageResource((item as BExample).drawable)\n    }\n\n    class Factory : BVAdpVHFactory {\n\n        override fun onCreateViewHolder(\n            parent: ViewGroup,\n            viewType: Int\n        ): BaseVastAdapterVH {\n            val inflater = LayoutInflater.from(parent.context)\n            val itemView: View = inflater.inflate(R.layout.item_imageview, parent, false)\n            return BViewHolder(itemView)\n        }\n\n        override fun getVAdpVHType(): String {\n            return \"picture\"\n        }\n\n    }\n\n    init {\n        iv = itemView.findViewById(R.id.item_image)\n    }\n}\n```\n\n### Implement BaseVastAdapter\n\nMake sure that the adapter implements `BaseVastAdapter`\n\n```kotlin\nclass BaseAdapter(\n    private val items: MutableList<VastAdapterItem>,\n    factories: MutableList<BaseVastAdapterVH.BVAdpVHFactory>\n) : BaseVastAdapter(items, factories)\n```\n\n### Use in Activity\n\n```kotlin\n// Get data source\nprivate val datas:MutableList<VastAdapterItem> = ArrayList()\n\nfor(i in 0..10){\n    datas.add(AExample(i.toString(),null,null))\n    datas.add(BExample(R.drawable.ic_knots,null,null))\n}\n\n// Set to RecyclerView\nadapter = BaseAdapter(datas, mutableListOf(AViewHolder.Factory(), BViewHolder.Factory()))\n\n// Datarv is RecyclerView\ndataRv.adapter = adapter\ndataRv.layoutManager = LinearLayoutManager(this)\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapter.gif\" width=30%/></div>\n\n## Add click (or long press) event\n\nFor lists, click events are essential. `VastAdapter` supports you to set generic click events for lists. Of course, because your class implements the `VastAdapterItem` interface, you can also set click events for them individually.\n\n### Generic click event settings\n\n```kotlin\nadapter.setOnItemClickListener(object :VastAdapter.OnItemClickListener{\n            override fun onItemClick(view: View, position: Int) {\n                // Something you want to do\n            }\n        })\nadapter.setOnItemLongClickListener(object:VastAdapter.OnItemLongClickListener{\n            override fun onItemLongClick(view: View, position: Int): Boolean {\n                // Something you want to do\n                return true\n            }\n        })\n```\n\n### Set up individual click events\n\nNote that if you define a click event for an item, it no longer supports generic click events.\n\n```kotlin\n// Set click event\nprivate val click = object :VAapClickEventListener{\n        override fun vAapClickEvent(view: View, pos: Int) {\n            showShortMsg(\"Click event and pos is $pos.\")\n        }\n    }\n\n// Set long click event\nprivate val longClick = object :VAdpLongClickEventListener{\n        override fun vAdpLongClickEvent(view: View, pos: Int): Boolean {\n            showShortMsg(\"Long click event and pos is $pos.\")\n            return true\n        }\n    }\n\n// Set the corresponding click event when adding a data source\nfor(i in 0..10){\n    datas.add(AExample(i.toString(),click,null))\n    datas.add(BExample(R.drawable.ic_knots,null,longClick))\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapterClick.gif\" width=30%/></div>\n\n## Add new data type\n\nIf you want to add a third type of data to the list, you only need the following three steps:\n\n- Define a new data type, such as **CExample**Ôºåand make it implement the **VastAdapterItem**  interface\n- Define the ViewHolder corresponding to **CExample**,such as **CViewHolder**\n- Add its corresponding  **Factory** to the adapter\n\n  ```kotlin\n  adapter = BaseAdapter(datas, mutableListOf(AViewHolder.Factory(), BViewHolder.Factory() ,CViewHolder.Factory()))\n  ```\n\n## Add additional features to the adapter\n\nThe following example shows you how to add the function of judging whether the data source is empty to the Adapter\n\n```kotlin\nclass BaseAdapter(\n    private val items: MutableList<VastAdapterItem>,\n    factories: MutableList<BaseVastAdapterVH.BVAdpVHFactory>\n) : BaseVastAdapter(items, factories) {\n\n    /**\n     * Returns true if the collection is empty (does not contain any elements), otherwise false.\n     * @return Boolean\n     */\n    fun isItemEmpty() = items.isEmpty()\n}\n```\n\n## Quote\n\nPart of the design of BaseVastAdapter refers to [completely decouple RecyclerView.Adapter](https://puke3615.github.io/2018/08/26/Android-RecyclerView-Architecture-Design/)"}, "/VastDocs/document/en/Bean.html": {"title": "Bean", "content": "# Bean\n\n## User\n\n```kotlin\nopen class User(val username: String, val password:String)\n```\n\n## Response\n\n```kotlin\nopen class Response<T:Any> (val code:Int,val msg:String,val data:T)\n```"}, "/VastDocs/document/en/RegexUtils.html": {"title": "RegexUtils", "content": "# RegexUtils\n\n`RegexUtils` provides some regex checks for strings.\n\n## Check if string is Email address\n\n```kotlin\n\"12345678@qq.com\".isEmail()\n```\n\n## Check if string meets password requirements\n\nCurrently this method supports three requirements:\n\n1Ô∏è‚É£ Password contains at least numbers and letters.\n2Ô∏è‚É£ Password contains two or more types:numbers,letters, and characters.\n3Ô∏è‚É£ Password contains at least numbers and letters, and can have characters.\n\n```kotlin\n// Password contains at least numbers and letters, and can have characters.\n\"123456xyz.\".isPwd(2)\n```\n\nOf course you can also set the length of the password:\n\n```kotlin\n// Password length between 5 and 20\n\"1234567.\".isPwd(1,5,20)\n```\n\n## Check if string is QQ number\n\n```kotlin\n\"123456710\".isQQ()\n```\n\n## Check if string is a phone number\n\nCurrently only supports phone number verification in China, please refer to [2021 ÊâãÊú∫Âè∑Ê≠£ÂàôË°®ËææÂºè](https://www.jianshu.com/p/1e8eab706a63)\n\n```kotlin\n\"16612341213\".isPhoneNumber()\n```\n\n## Check if string is a number\n\n```kotlin\n\"123456789\".isNumeric()\n```"}, "/VastDocs/document/en/VastTools.html": {"title": "", "content": "<h1 align=\"center\">VastTools</h1>\n\n## üí´  characteristics\n\n- üëç `AppUtils` supports getting application name, current version name, application version number, application package name, application icon, and application Debug status.\n- üëç `Bean` is a frequently used bean.\n- üëç `ColorUtils` provides you with a way to convert between different Color formats.\n- üëç `DateUtils` supports getting date and other related information, details can be [click here](https://juejin.cn/post/7029336437493350407) .\n- üëç `DensityUtils` provides mutual conversion between dp px sp, and also supports `56f.sp`.\n- üëç `IDCardUtils` is mainly used to verify the correctness of Chinese resident ID cards locally.\n- üëç `IntentUtils` provides commonly used [Intent](https://developer.android.com/guide/components/intents-common?hl=zh-cn), such as `make a call, open a webpage.\n- üëç `LogUtils` provides a log printing tool, details can be [click here](https://juejin.cn/post/7027420579607248932) .\n- üëç `MergeBmpUtils` provides [Bitmap](https://developer.android.com/reference/kotlin/android/graphics/Bitmap?hl=en) merge method.\n- üëç `NetStateUtils` is used to check device network status.\n- üëç `RegexUtils` provides some regex checks for strings.\n- üëç `ScreenSizeUtils` provides you with a method to get the screen length and width.\n- üëç `ShapeAndStateUtils` is an encapsulation of [GradientDrawable](https://developer.android.google.cn/reference/android/graphics/drawable/GradientDrawable?hl=en), you don't need to create a shape every time you use it. xml .\n- üëç `SystemUtils` provides a way to get system information.\n- üëç `ToastUtils` provides two common message prompt boxes Short Toast, Long Toast.\n- üëç `VastBaseActivity` is encapsulated based on [AppCompatActivity](https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity), which is convenient for you to use Activity quickly.\n- üëç `VastBaseFragment` is encapsulated based on [Fragment](https://developer.android.com/reference/androidx/fragment/app/Fragment.html), which is convenient for you to use Fragment quickly."}, "/VastDocs/document/en/VastBaseActivity.html": {"title": "VastBaseActivity", "content": "# VastBaseActivity\n\n`VastBaseActivity` is encapsulated based on [AppCompatActivity](https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity), and it is encapsulated based on `VastBaseActivity`, as shown in the figure:\n\n<div align=\"center\"><img src=\"../assets/images/vba.png\"></div>\n\n## Quick start\n\nLet's take `VastVbVmActivity` as an example, you don't need to manually initialize `ViewBinding` and `ViewModel` .\n\n```kotlin\nclass BaseVbActivity : VastVbVmActivity<ActivityBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n\n        mBinding.addOne.setOnClickListener {\n            mViewModel.addOne()\n        }\n\n        mViewModel.count.observe(this){\n            mBinding.count.text = it.toString()\n        }\n\n    }\n\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/vba_eg_1.gif\" width=\"40%\"></div>\n\n## Hide ActionBar\n\n```kotlin\nclass BaseVbActivity : VastVbVmActivity<ActivityBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        enableActionBar = false // Hide ActionBar\n        ... // Other settings\n    }\n\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/vba_eg_2.jpg\" width=\"40%\"></div>\n\n## Full screen\n\n```kotlin\nclass BaseVbActivity : VastVbVmActivity<ActivityBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        enableFullScreen = true // Full screen\n        ... // other settings\n    }\n\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/vba_eg_3.jpg\" width=\"40%\"></div>"}, "/VastDocs/document/en/NetStateUtils.html": {"title": "NetStateUtil", "content": "# NetStateUtil\n\nWith `NetStateUtils` you can easily check some network status about your device\n\n## Check if the network is available\n\n```kotlin\n// True is available, otherwise False\nval available = isNetworkAvailable()\n````\n\n## Check if it is connected to WIFI\n\n```kotlin\n// True is in WIFI connection, otherwise False\nval isWifi = isWIFI()\n````\n\n## Check if you are on the mobile network\n\n```kotlin\n// True is in the mobile network connection, otherwise False\nval isMobile = isMobile()\n````\n\n## Check WIFI signal strength\n\n```kotlin\n// signalStrength is the signal strength\nval signalStrength = getWifiDBM()\n````"}, "/VastDocs/document/en/ShapeAndStateUtils.html": {"title": "ShapeAndStateUtils", "content": "# ShapeAndStateUtils\n\n`ShapeAndStateUtils` encapsulates [GradientDrawable](https://developer.android.google.cn/reference/android/graphics/drawable/GradientDrawable), so you don't need to create shape.xml every time you use it.\n\n## Quick start\n\nThe following example shows you the basic usage of `ShapeAndStateUtils` .\n\n```kotlin\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setBkColor(getColor(R.color.teal_200))\n            .build()\n\nmBinding.btn1.background = btnbk1\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_1.jpg\"/></div>\n\n## Set shape\n\nYou can use the `setShape` to set the shape, currently supported `RECTANGLE`, `OVAL`, `LINE`, `RING` .\n\n```kotlin\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(OVAL)\n            .build()\n```\n\n## Set corner radius.\n\nWhen your button shape is `RECTANGLE` , you can use `setRadius` to set corner radius.\n\n```kotlin\n// Set four rounded corners with a radius of 50.0\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .build()\n\n// Set four corners of different radius\nval btnbk2 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(0f,0f,50f,50f)\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_2.jpg\"/></div>\n\n## Set gradient\n\n`ShapeAndStateUtils` currently supports two gradient type.\n\n- startColor->endColor\n- startColor->centerColor->endColor\n\n```kotlin\n// startColor->centerColor->endColor\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setGradient(45, colorHex2Int(\"#12c2e9\"),colorHex2Int(\"#c471ed\"),colorHex2Int(\"#f64f59\"))\n            .build()\n\n// startColor->endColor\nval btnbk2 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setGradient(45, colorHex2Int(\"#0F2027\"),colorHex2Int(\"#78ffd6\"))\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_3.jpg\"/></div>\n\n## Set stroke\n\n```kotlin\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setGradient(45, colorHex2Int(\"#12c2e9\"),colorHex2Int(\"#c471ed\"),colorHex2Int(\"#f64f59\"))\n            .setStroke(15f, colorHex2Int(\"#3E5151\"))\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_4.jpg\"/></div>\n\n## Set state color\n\nWe know that sometimes for different states,we want it to show different colors, of course `ShapeAndStateUtils` provides you with `setBgColorStateList` and `setStrokeColorStateList` methods to help you to set state color, the following is an example\n\n```kotlin\n// Define state\nval states = arrayOfNulls<IntArray>(6).apply {\n        set(0, intArrayOf(android.R.attr.state_pressed, android.R.attr.state_enabled))\n        set(1, intArrayOf(android.R.attr.state_focused, android.R.attr.state_enabled))\n        set(2, intArrayOf(-android.R.attr.state_focused, android.R.attr.state_enabled))\n        set(3, intArrayOf(android.R.attr.state_focused))\n        set(4, intArrayOf(android.R.attr.state_window_focused))\n        set(5, intArrayOf())\n    }\n\n// Define the colors in different states\nval colorList = IntArray(6).apply {\n        set(0, colorHex2Int(\"#00F260\"))\n        set(1, colorHex2Int(\"#FFFFFF\"))\n        set(2, colorHex2Int(\"#0575E6\"))\n        set(3, colorHex2Int(\"#FFFFFF\"))\n        set(4, colorHex2Int(\"#EF3B36\"))\n        set(5, colorHex2Int(\"#0575E6\"))\n}\n\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setStroke(15f, colorHex2Int(\"#3E5151\"))\n            .setBgColorStateList(states,colorList)\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_5.gif\" width=50%/></div>"}, "/VastDocs/document/en/MergeBmpUtils.html": {"title": "MergeBmpUtils", "content": "# MergeBmpUtils\n\n`MergeBmpUtils` mainly provides you with some methods of merging bitmap\n\n## The two bitmaps are overlaid and synthesized into one bitmap, based on the length and width of the underlying bitmap\n\n```kotlin\niv.setImageBitmap(mergeBmp(getAppBitmap(this)!!,bitmap))\n```\n\nThe operation results are as follows:\n\n<div align=\"center\"><img src=\"../assets/images/mergeBmp.jpg\" width=\"40%\"></div>\n\n## The two bitmaps are overlaid and synthesized into one bitmap, which is spliced up and down. The two bitmaps are overlaid and synthesized into one bitmap, which is spliced left and right\n\n```kotlin\n// iv is an ImageView control\n// We use the method in AppInfoUtils to obtain the application Bmp icon\niv.setImageBitmap(mergeBmpLR(getAppBitmap(this)!!,getAppBitmap(this)!!,true))\n```\n\nThe operation results are as follows\n\n<div align=\"center\"><img src=\"../assets/images/mergeBmpLR.jpg\" width=\"40%\"></div>\n\n## The two bitmaps are overlaid and synthesized into one bitmap, which is spliced up and down\n\n```kotlin\n// iv is an ImageView control\n// We use the method in AppInfoUtils to obtain the application Bmp icon\niv.setImageBitmap(mergeBmpTB(getAppBitmap(this)!!,getAppBitmap(this)!!,true))\n```\n\nThe operation results are as follows\n\n<div align=\"center\"><img src=\"../assets/images/mergeBmpTB.jpg\" width=\"40%\"></div>"}, "/VastDocs/document/en/DateUtils.html": {"title": "DateUtils", "content": "# DateUtils\n\n## Supported time formats\n\n```java\npublic static final String DATE_FORMAT = \"yyyy-MM-dd\";\npublic static final String TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\npublic static final String FORMAT_YYYY_MM = \"yyyy-MM\";\npublic static final String FORMAT_YYYY = \"yyyy\";\npublic static final String FORMAT_HH_MM = \"HH:mm\";\npublic static final String FORMAT_HH_MM_SS = \"HH:mm:ss\";\npublic static final String FORMAT_MM_SS = \"mm:ss\";\npublic static final String FORMAT_MM_DD_HH_MM = \"MM-dd HH:mm\";\npublic static final String FORMAT_MM_DD_HH_MM_SS = \"MM-dd HH:mm:ss\";\npublic static final String FORMAT_YYYY_MM_DD_HH_MM = \"yyyy-MM-dd HH:mm\";\npublic static final String FORMAT_YYYY2MM2DD = \"yyyy.MM.dd\";\npublic static final String FORMAT_YYYY2MM2DD_HH_MM = \"yyyy.MM.dd HH:mm\";\npublic static final String FORMAT_MMCDD_HH_MM = \"MMÊúàddÊó• HH:mm\";\npublic static final String FORMAT_MMCDD = \"MMÊúàddÊó•\";\npublic static final String FORMAT_YYYYCMMCDD = \"yyyyÂπ¥MMÊúàddÊó•\";\n```\n\n## Supported time zones\n\n```java\npublic static final String GMT_PLUS_ZONE = \"GMT+00:00\";\npublic static final String GMT_PLUS_ONE = \"GMT+01:00\";\npublic static final String GMT_PLUS_TWO = \"GMT+02:00\";\npublic static final String GMT_PLUS_THREE = \"GMT+03:00\";\npublic static final String GMT_PLUS_FOUR = \"GMT+04:00\";\npublic static final String GMT_PLUS_FIVE = \"GMT+05:00\";\npublic static final String GMT_PLUS_SIX = \"GMT+06:00\";\npublic static final String GMT_PLUS_SEVEN = \"GMT+07:00\";\npublic static final String GMT_PLUS_EIGHT = \"GMT+08:00\";\npublic static final String GMT_PLUS_NINE = \"GMT+09:00\";\npublic static final String GMT_PLUS_TEN = \"GMT+10:00\";\npublic static final String GMT_PLUS_ELEVEN = \"GMT+11:00\";\npublic static final String GMT_PLUS_TWELVE = \"GMT+12:00\";\npublic static final String GMT_MINUS_ONE = \"GMT-01:00\";\npublic static final String GMT_MINUS_TWO = \"GMT-02:00\";\npublic static final String GMT_MINUS_THREE = \"GMT-03:00\";\npublic static final String GMT_MINUS_FOUR = \"GMT-04:00\";\npublic static final String GMT_MINUS_FIVE = \"GMT-05:00\";\npublic static final String GMT_MINUS_SIX = \"GMT-06:00\";\npublic static final String GMT_MINUS_SEVEN = \"GMT-07:00\";\npublic static final String GMT_MINUS_EIGHT = \"GMT-08:00\";\npublic static final String GMT_MINUS_NINE = \"GMT-09:00\";\npublic static final String GMT_MINUS_TEN = \"GMT-10:00\";\npublic static final String GMT_MINUS_ELEVEN = \"GMT-11:00\";\npublic static final String GMT_MINUS_TWELVE = \"GMT-12:00\";\n```\n\n## Get current time\n\nfor example:\n\n```kotlin\nLog.i(\"VU\",DateUtils.currentTime)\n```\n\nresult:\n\n```\n// By default, the result is based on month, year, day, hour, minute and second\n2022-02-08 12:34:15.921 11132-11132/com.gcode.vastutils I/VU: 2022-02-08 12:34:15\n```\n\n## Get the current time zone of the device\n\nfor example:\n\n```kotlin\nLog.i(\"VU\",DateUtils.currentTimeZone)\n```\n\nresult:\n\n```\n2022-02-08 12:39:07.938 13174-13174/com.gcode.vastutils I/VU: GMT+08:00\n```\n\n## Gets the Date object of the current minimum date\n\nfor example:\n\n```kotlin\nval date: Date = DateUtils.minDate()\n```\n\n## The minimum date string parsed in the specified format\n\nfor example:\n\n```kotlin\n// If no parameter is added, it will be parsed in the format of yyyy-MM-dd HH:mm:ss by default.\nLog.i(\"VU\",DateUtils.minDateToString())\n// If add format parameters of FORMAT_HH_MM,it will return only hours and minutes.\nLog.i(\"VU\",DateUtils.minDateToString(FORMAT_HH_MM))\n```\n\nresult:\n\n```kotlin\n// Default format.\n2022-02-08 14:20:30.002 17203-17203/com.gcode.vastutils I/VU: 1900-02-01 14:20:30\n// Results in the given format.\n2022-02-08 14:18:51.090 16270-16270/com.gcode.vastutils I/VU: 14:18\n```\n\n## Gets the Date object according to the given time string and format\n\nfor example:\n\n```kotlin\nval date: Date? = DateUtils.datetimeFromString(\"14:18\", FORMAT_HH_MM)\n```\n\n## Resolves the given Date to a time string\n\nfor example:\n\n```kotlin\n// Get a Date object\nval date: Date? = DateUtils.datetimeFromString(\"14:18\", FORMAT_HH_MM)\n// Print time string in log\nLog.i(\"VU\",DateUtils.datetimeToString(date!!, FORMAT_HH_MM_SS))\n```\n\nresult:\n\n```kotlin\n2022-02-08 14:40:07.019 2431-2431/com.gcode.vastutils I/VU: 14:18:00\n```\n\n## Get current local time string by parsing the utcTime in dateFormat format\n\nfor example:\n\n```kotlin\n// By default, the string is obtained according to yyyy MM DD HH: mm: SS and the current time zone\nLog.i(\"VU\",DateUtils.dateTimeToGMT())\n//Set the time zone as the East Sixth zone, and the time format is yyyy MM. dd HH:mm\nLog.i(\"VU\",DateUtils.dateTimeToGMT(GMT_PLUS_SIX,FORMAT_YYYY2MM2DD_HH_MM))\n```\n\nresult:\n\n```kotlin\n// By default\n2022-02-08 14:51:40.894 10129-10129/com.gcode.vastutils I/VU: 2022-02-08 14:51:40\n// Set parameters\n2022-02-08 14:54:35.201 11780-11780/com.gcode.vastutils I/VU: 2022.02.08 12:54\n```\n\n## Parse the current time according to the given UTC time and format\n\nfor example:\n\n```kotlin\nLog.i(\"VU\",DateUtils.dateTimeFromGMT(\"07:01\",FORMAT_HH_MM))\n```\n\nresult:\n\n```kotlin\n2022-02-08 15:01:25.009 14700-14700/com.gcode.vastutils I/VU: 15:01\n```\n\n## Get the start (or end) time of the week. Monday is the first day\n\nfor example:\n\n```kotlin\n// Get start time\nLog.i(\"VU\",DateUtils.weekStartTime())\n// Get end time\nLog.i(\"VU\",DateUtils.weekEndTime())\n```\n\nresult:\n\n```kotlin\n//Get start time\n2022-02-08 15:03:41.619 15780-15780/com.gcode.vastutils I/VU: 2022-02-07\n//Get end time\n2022-02-08 15:05:10.837 16168-16168/com.gcode.vastutils I/VU: 2022-02-13\n```\n\n## Get the timestamp of the beginning (or end) of the week. Sunday is the first day\n\nfor example:\n\n```kotlin\n// Start timestamp\nLog.i(\"VU\",DateUtils.getWeekStartTime())\n// End timestamp\nLog.i(\"VU\",DateUtils.getWeekEndTime())\n```\n\nresult:\n\n```kotlin\n// Start timestamp\n2022-02-08 15:08:31.918 17680-17680/com.gcode.vastutils I/VU: 2022-02-06\n// End timestamp\n2022-02-08 15:09:47.869 18010-18010/com.gcode.vastutils I/VU: 2022-02-12\n```"}, "/VastDocs/document/en/IntentUtils.html": {"title": "IntentUtils", "content": "# IntentUtils\n\n`IntentUtils` provides you some common [Intent](https://developer.android.com/guide/components/intents-common)\n\nNote: If your device is Android 11 (API>=30), you should make the following declaration in **AndroidManifest.xml**, otherwise the corresponding Activity may not be found. E.g:\n\n```xml\n<queries>\n    <intent>\n        <action android:name=\"android.intent.action.DIAL\"/>\n    </intent>\n</queries>\n```\n\n## Quick Start\n\n### Initiate a phone call\n\n```kotlin\ncallBtn.setOnClickListener {\n    dialPhoneNumber(\"12345678910\")\n}\n```\n\n### Perform a web search\n\n```kotlin\nsearchWeb.setOnClickListener {\n    searchWeb(\"12345678910\")\n}\n```\n\n### Load a web URL\n\n```kotlin\nopenWebPage.setOnClickListener {\n    openWebPage(\"http://www.baidu.com\")\n}\n```\n\n### Compose an SMS/MMS message with attachment\n\n```kotlin\nsendMmsMessage.setOnClickListener {\n    sendMmsMessage(\"123456\",\"1238489\")\n}\n```\n\n### Compose an email with optional attachments\n\n```kotlin\nsendEmail.setOnClickListener {\n    openEmail(arrayOf(\"12345678@qq.com\"))\n}\n```\n\n### Create an alarm\n\n```kotlin\ncreateAlarm.setOnClickListener {\n    createAlarm(\"Hello\",12,30)\n}\n```\n\n### Open wifi settings\n\n```kotlin\nwifiSetting.setOnClickListener {\n    openWirelessSettings()\n}\n```"}, "/VastDocs/document/en/index.html": {"title": "", "content": "<p align=\"center\">\n<center style=\"display:flex;justify-content:center\">\n<img src=\"../assets/images/android.png\" width=60 height=60/><p style=\"font-size:20px;\">With</p><img src=\"../assets/images/Tools.png\" width=60 height=60/>\n</center>\n\n<p align=\"center\" p style=\"font-size:30px;\">VastUtils</p>\n\n<p align=\"center\">Easy Quick Android Utils for you to faster project development.</p>\n</p>\n\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/compile--sdk--version-32-blue\"/>\n<img src=\"https://img.shields.io/badge/min%20sdk%20version-23-yellowgreen\"/>\n<img src=\"https://img.shields.io/badge/target--sdk--version-32-orange\"/>\n<img src=\"https://img.shields.io/badge/jdk%20version-11-%2300b894\"/>\n</p>\n\n## üöÄ How to\n\n### VastNetStateLayout\n\nA layout to set customized network state ui.\n\n```groovy\nimplementation 'io.github.sakurajimamaii:VastNetStateLayout:0.0.3'\n```\n\n### VastTools\n\nEasy Quick Android Tools for you to faster project development.\n\n```groovy\nimplementation 'io.github.sakurajimamaii:VastTools:0.0.7'\n```\n\n### VastAdapte\n\nHelp you quickly build an Adapter suitable for RecyclerView.\n\n```groovy\nimplementation 'io.github.sakurajimamaii:VastAdapter:0.0.4'\n```"}, "/VastDocs/document/en/ToastUtils.html": {"title": "ToastUtils", "content": "# ToastUtils\n\n`Toastutils` provides you with quick pop-up settings\n\n## Pop up long toast\n\n```kotlin\nshowLongMsg(\"Hello\") // use the characters directly\nshowLongMsg(R.string.app_name) // use str id\n```\n\n## Pop up short toast\n\n```kotlin\nshowShortMsg(\"Hello\") // use the characters directly\nshowShortMsg(R.string.app_name) //  use str id\n```"}, "/VastDocs/document/en/VastNetStateLayout.html": {"title": "VastNetStateLayout", "content": "# VastNetStateLayout\n\n## Quick start\n\n```xml\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".activity.NetStateActivity\">\n    <com.gcode.vastnetstatelayout.view.VastNetStateLayout\n        android:id=\"@+id/net_state_layout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <!--content-->\n    </com.gcode.vastnetstatelayout.view.VastNetStateLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n## Change page state\n\n`VastNetStateLayout` provides you with **four** page states for you to switch to\n\n```kotlin\n// show loading\nnetStateLayout.showLoading()\n// show loading error\nnetStateLayout.showLoadingError()\n// show empty data\nnetStateLayout.showEmptyData()\n// show net error\nnetStateLayout.showNetError()\n```\n\nWhen the load is successful, you can use the following methods to display the correct page\n\n```kotlin\nnetStateLayout.showSuccess()\n```\n\n## Set page event\n\n`VastNetStateLayout` allows you to customize page click events\n\n### Net error\n\n```kotlin\nvastNetStateMgr.setNetErrorListener(object :VastNetErrorListener{\n    override fun onNetWorkError() {\n        // Something to do when network error\n    }\n})\n```\n\n### Empty data\n\n```kotlin\nvastNetStateMgr.setEmptyDataListener(object :VastEmptyDataListener{\n    override fun onEmptyData() {\n        // Something to do when empty data\n    }\n})\n```\n\n### Loading error\n\n```kotlin\nvastNetStateMgr.setLoadingErrorListener(object :VastLoadingErrorListener{\n    override fun onLoadingError() {\n        // Something to do when loading error\n    }\n})\n```\n\n### Loading\n\n```kotlin\nvastNetStateMgr.setLoadingListener(object : VastLoadingListener {\n    override fun onLoading() {\n        // Something to do when loading\n    }\n})\n```\n\n## Custom page view\n\n```kotlin\nvastNetStateMgr.setNetErrorView(R.layout.error_page)\n```"}, "/VastDocs/document/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}