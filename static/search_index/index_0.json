{"/VastDocs/document/zh/LogUtils.html": {"title": "LogUtils", "content": "# LogUtils\n\n日志工具类是基于 [Log](https://developer.android.com/reference/android/util/Log?hl=en) 上进行拓展的一个日志工具类，关于日志更多内容请查看 [使用 Logcat 写入和查看日志](https://developer.android.com/studio/debug/am-logcat?hl=zh-cn)\n\n## 基本使用\n\n在开始之前，你需要获知当前应用是否处于调试状态。\n\n```kotlin\n// 这是重要且必须的\nLogUtils.syncIsDeBug(this)\n```\n\n下面向我们展示了如何打印一条**info**信息。\n\n```kotlin\nLogUtils.i(this.javaClass.simpleName,\"Hello,This is a info\")\n```\n\n我们看一下运行结果：\n\n```kotlin\n2022-02-08 21:34:48.024 9643-9643/com.gcode.vastutils I/class (MainActivity.kt:51): method: onCreate() key: MainActivity content: Hello,This is a info\n```\n\n**默认情况下**，其中显示了打印日志的位置 `MainActivity.kt:51` ，是在哪里打印日志的 `method: onCreate()` ，关键字`key: MainActivity` ，打印的信息 `content: Hello,This is a info`。\n\n## 自定义打印内容\n\n`LogUtils` 提供了接口以便你能够自定义打印内容格式，例如：\n\n```kotlin\n// 自定义打印内容格式\nLogUtils.setLogContentFormat(object : LogUtils.LogContent {\n    override fun logContentFormat(methodName: String?, key: String?, content: String?): String {\n        return \"$methodName() $key $content\"\n    }\n})\n// 打印日志\nLogUtils.i(this.javaClass.simpleName,\"Hello,This is a info\")\n```\n\n此时的运行结果\n\n```kotlin\n2022-02-08 23:29:48.359 2836-2836/com.gcode.vastutils I/class (MainActivity.kt:46): onCreate() MainActivity Hello,This is a info\n```\n\n## 支持超长内容打印\n\n`LogUtils` 允许你打印超长内容，自由打印，不受约束\n\n```kotlin\nvar str = \"\"\nrepeat(2000){\n    str += it.toString()\n}\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\n打印结果\n\n```kotlin\n2022-02-08 23:39:21.056 17753-17753/com.gcode.vastutils I/class (MainActivity.kt:45): method: onCreate() key: MainActivity content: 01234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000100110021003100410051006100710081009101010111012101310141015101610171018101910201021102210231024102510261027102810291030103110321033103410351036103710381039104010411042104310441045104610471048104910501051105210531054105510561057105810591060106110621063106410651066106710681069107010711072107310741075107610771078107910801081108210831084108510861087108810891090109110921093109410951096109710981099110011011102110311041105110611071108110911101111111211131114111511161117111811191120112111221123112411251126112711281129113011311132113311341135113611371138113911401141114211431144114511461147114811491150115111521153115411551156115711581159116011611162116311641165116611671168116911701171117211731174117511761177117811791180118111821183118411851186118711881189119011911192119311941195119611971198119912001201120212031204120512061207120812091210121112121213121412151216121712181219122012211222122312241225122612271228122912301231123212331234123512361237123812391240124112421243124412451246124712481249125012511252125312541255125612571258125912601261126212631264126\n2022-02-08 23:39:21.057 17753-17753/com.gcode.vastutils I/class (MainActivity.kt:45): 51266126712681269127012711272127312741275127612771278127912801281128212831284128512861287128812891290129112921293129412951296129712981299\n```\n\n## 设置单条日志打印内容的字符长度\n\n首先我们按照默认情况(一次打印**字符**长度最大为**1000**)进行打印\n\n```kotlin\nvar str = \"\"\nrepeat(800){\n    str += it.toString()\n}\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\n运行结果如下\n\n```kotlin\n2022-02-09 10:50:26.848 4035-4035/com.gcode.vastutils I/class (MainActivity.kt:45): method: onCreate() key: MainActivity content: 0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799\n```\n\n那么此时我们设定每次最大打印长度为200\n\n```kotlin\nvar str = \"\"\nrepeat(800){\n    str += it.toString()\n}\nLogUtils.setSingleLogCharLength(200) // 设置每次最大打印长度为200\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\n此时的运行结果是\n\n```kotlin\n2022-02-09 11:53:37.267 22764-22764/com.gcode.vastutils I/class (MainActivity.kt:46): method: onCreate() key: MainActivity content: 012345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628\n2022-02-09 11:53:37.267 22764-22764/com.gcode.vastutils I/class (MainActivity.kt:46): 7288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553\n2022-02-09 11:53:37.268 22764-22764/com.gcode.vastutils I/class (MainActivity.kt:46): 554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799\n```\n\n## 设置最多打印的次数\n\n我们依旧以上面的示例为基础，并设置最多打印两条日志\n\n```kotlin\nvar str = \"\"\nrepeat(800){\n    str += it.toString()\n}\nLogUtils.setMaxPrintTimes(2) // 设置最多能打印两行\nLogUtils.setSingleLogCharLength(200) // 设置每次最大打印长度为200\nLogUtils.i(this.javaClass.simpleName, str)\n```\n\n此时只会打印三行中的两行\n\n```kotlin\n2022-02-09 12:12:36.433 3710-3710/com.gcode.vastutils I/class (MainActivity.kt:47): method: onCreate() key: MainActivity content: 012345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628\n2022-02-09 12:12:36.434 3710-3710/com.gcode.vastutils I/class (MainActivity.kt:47): 7288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553\n```"}, "/VastDocs/document/zh/ScreenSizeUtils.html": {"title": "ScreenSizeUtils", "content": "# ScreenSizeUtils\n\n`ScreenSizeUtils` 为你提供了获取屏幕长宽的方法，例如:\n\n当你在 `Activity` 内使用时：\n\n```kotlin\nval screenWidth = getMobileScreenWidth()\nval screenHeight = getMobileScreenHeight()\n```\n\n当你在 `Fragment` 内使用时\n\n```kotlin\nval screenHeight = requireContext().getMobileScreenHeight()\nval screenWidth = requireContext().getMobileScreenWidth()\n```\n\n运行示例\n\n```kotlin\nLogUtils.i(\"VU\",\"$screenWidth $screenHeight\")\n\n2022-02-10 21:47:37.265 4463-4463/com.gcode.vastutils I/class (MainActivity.kt:43): method: onCreate() key: VU content: 1080 2340\n```"}, "/VastDocs/document/zh/IDCardUtils.html": {"title": "IDCardUtils", "content": "# IDCardUtils\n\n`IDCardUtils` 主要用于在**本地**验证中国居民身份证的正确性，使用方法如下：\n\n```kotlin\nIDCardValidate(\"123456789101112131\")\n```\n\n下面列举了验证失败的情况：\n\n1️⃣ 身份证号码长度不是15位或18位。\n2️⃣ 身份证15位号码不都为数字 ; 18位号码除最后一位外，不都为数字。\n3️⃣ 身份证生日无效。\n4️⃣ 身份证生日不在有效范围。\n5️⃣ 身份证月份无效。\n6️⃣ 身份证日期无效。\n7️⃣ 身份证地区编码错误。"}, "/VastDocs/document/zh/index.html": {"title": "", "content": "<p align=\"center\">\n<center style=\"display:flex;justify-content:center\">\n<img src=\"../assets/images/android.png\" width=60 height=60/><p style=\"font-size:20px;\">With</p><img src=\"../assets/images/Tools.png\" width=60 height=60/>\n</center>\n\n<p align=\"center\" p style=\"font-size:30px;\">VastUtils</p>\n\n<p align=\"center\">一款加快你安卓开发的安卓工具集\n</p>\n\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/compile--sdk--version-32-blue\"/>\n<img src=\"https://img.shields.io/badge/min%20sdk%20version-23-yellowgreen\"/>\n<img src=\"https://img.shields.io/badge/target--sdk--version-32-orange\"/>\n<img src=\"https://img.shields.io/badge/jdk%20version-11-%2300b894\"/>\n</p>\n\n## 🚀 快速使用\n\n### VastNetStateLayout\n\n一款支持自定义网络状态的布局控件\n\n```groovy\nimplementation 'io.github.sakurajimamaii:VastNetStateLayout:0.0.3'\n```\n\n### VastTools\n\n包含了常用的安卓工具\n\n```groovy\nimplementation 'io.github.sakurajimamaii:VastTools:0.0.7'\n```\n\n### VastAdapter\n\n帮助你快速构建匹配RecyclerView的适配器\n\n```groovy\nimplementation 'io.github.sakurajimamaii:VastAdapter:0.0.4'\n```"}, "/VastDocs/document/zh/ToastUtils.html": {"title": "ToastUtils", "content": "# ToastUtils\n\nToastUtils为你提供了快捷的弹窗设置\n\n## 弹出长Toast\n\n```kotlin\nshowLongMsg(\"Hello\") // 直接使用字符\nshowLongMsg(R.string.app_name) // 使用str id\n```\n\n## 弹出短Toast\n\n```kotlin\nshowShortMsg(\"Hello\") // 直接使用字符\nshowShortMsg(R.string.app_name) // 使用str id\n```"}, "/VastDocs/document/zh/ShapeAndStateUtils.html": {"title": "ShapeAndStateUtils", "content": "# ShapeAndStateUtils\n\n`ShapeAndStateUtils` 是对 [GradientDrawable](https://developer.android.google.cn/reference/android/graphics/drawable/GradientDrawable?hl=en) 进行了封装，不必每次使用都需要创建 shape.xml\n\n## 快速开始\n\n下面的示例为你演示了 `ShapeAndStateUtils` 的基础使用\n\n```kotlin\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setBkColor(getColor(R.color.teal_200))\n            .build()\n\nmBinding.btn1.background = btnbk1\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_1.jpg\"/></div>\n\n## 设置形状\n\n你可以使用 `setShape` 方法去设置形状，目前支持\n`RECTANGLE` ， `OVAL` ， `LINE` ， `RING`四种形状\n\n```kotlin\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(OVAL)\n            .build()\n```\n\n## 设置圆角\n\n当你的按钮形状是 `RECTANGLE` 时，你可以通过下列方式设置圆角\n\n```kotlin\n// 设置四个圆角，半径均为50.0\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .build()\n\n// 设置四个大小不同的圆角\nval btnbk2 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(0f,0f,50f,50f)\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_2.jpg\"/></div>\n\n## 设置渐变\n\n`ShapeAndStateUtils` 目前支持两种渐变颜色形式\n\n- startColor->endColor\n- startColor->centerColor->endColor\n\n```kotlin\n// startColor->centerColor->endColor\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setGradient(45, colorHex2Int(\"#12c2e9\"),colorHex2Int(\"#c471ed\"),colorHex2Int(\"#f64f59\"))\n            .build()\n\n// startColor->endColor\nval btnbk2 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setGradient(45, colorHex2Int(\"#0F2027\"),colorHex2Int(\"#78ffd6\"))\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_3.jpg\"/></div>\n\n## 添加边框\n\n```kotlin\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setGradient(45, colorHex2Int(\"#12c2e9\"),colorHex2Int(\"#c471ed\"),colorHex2Int(\"#f64f59\"))\n            .setStroke(15f, colorHex2Int(\"#3E5151\"))\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_4.jpg\"/></div>\n\n以上便是 `ShapeAndStateUtils` 的基础使用\n\n## 定义不同状态下的颜色\n\n我们知道有时候对于控件的不同状态，我们希望其呈现不同的颜色，当然 `ShapeAndStateUtils` 为你提供了 `setBgColorStateList` 和 `setStrokeColorStateList` 方法来帮助你实现此功能，以下为示例\n\n```kotlin\n// 定义状态\nval states = arrayOfNulls<IntArray>(6).apply {\n        set(0, intArrayOf(android.R.attr.state_pressed, android.R.attr.state_enabled))\n        set(1, intArrayOf(android.R.attr.state_focused, android.R.attr.state_enabled))\n        set(2, intArrayOf(-android.R.attr.state_focused, android.R.attr.state_enabled))\n        set(3, intArrayOf(android.R.attr.state_focused))\n        set(4, intArrayOf(android.R.attr.state_window_focused))\n        set(5, intArrayOf())\n    }\n\n// 定义不同状态下对应的颜色\nval colorList = IntArray(6).apply {\n        set(0, colorHex2Int(\"#00F260\"))\n        set(1, colorHex2Int(\"#FFFFFF\"))\n        set(2, colorHex2Int(\"#0575E6\"))\n        set(3, colorHex2Int(\"#FFFFFF\"))\n        set(4, colorHex2Int(\"#EF3B36\"))\n        set(5, colorHex2Int(\"#0575E6\"))\n}\n\nval btnbk1 = ShapeAndStateUtils.create()\n            .setShape(RECTANGLE)\n            .setRadius(50f)\n            .setStroke(15f, colorHex2Int(\"#3E5151\"))\n            .setBgColorStateList(states,colorList)\n            .build()\n```\n\n<div align=\"center\"><img src=\"../assets/images/shape_eg_5.gif\" width=50%/></div>"}, "/VastDocs/document/zh/Bean.html": {"title": "Bean", "content": "# Bean\n\n## User\n\n定义如下\n\n```kotlin\nopen class User(val username: String, val password:String)\n```\n\n## Response\n\n定义如下\n\n```kotlin\nopen class Response<T:Any> (val code:Int,val msg:String,val data:T)\n```"}, "/VastDocs/document/zh/VastNetState.html": {"title": "", "content": "<h1 align=\"center\">VastNetStateLayout</h1>\n\n<p align=\"center\">VastNetStateLayout继承自framelayout。你可以自定义下列状态页面: loading,error,ok,empty data.</p>\n\n## 💫 特性\n\n- 👍 支持自定义四种状态页面 `loading 加载页面` `empty data 空数据页面` `net error 网络错误页面` `retry 重试界面`\n- 👍 支持自定义重试或者网络错误事件\n- 👍 使用`VastNetStateMgr`进行界面管理\n- 👍 设置有默认界面，添加即用\n\n<div align=\"center\">\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9a3bb6a2bc34b8ab4d846786045c9e0~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c950258361404f13ba76ce8393a30eab~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/910d7acfe764488bb03d87b45359608c~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n<image src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa7a12ba7d04449882f9073973dbbcd8~tplv-k3u1fbpfcp-zoom-1.image\" width=30%/>\n</div>"}, "/VastDocs/document/zh/VastSkin.html": {"title": "VastSkin", "content": "# VastSkin\n\n`VastSkin` 是基于替换 [LayoutInflater.Factory2](https://developer.android.com/reference/android/view/LayoutInflater.Factory2) 实现的非侵入式换肤框架\n\n## 快速开始\n\n### 注册Application\n\n```xml\n<application\n        android:name=\"com.gcode.vasttools.base.VastApp\"\n        ...>\n</application>\n```\n\n如果你需要设置自己的Application，不过请确保其继承自 `VastApp`\n\n### 将获取到的皮肤资源包加载即可\n\n```kotlin\n// 在Kotlin中调用\nVastSkinManager.loadSkin(\"data/data/com.gcode.vastutils/files/darkskin-debug.apk\")\n```\n\n```java\n// 在java中调用\nVastSkinManager.INSTANCE.loadSkin(\"data/data/com.gcode.vastutils/files/darkskin-debug.apk\");\n```\n\n没错，就这么简单！\n\n## 支持替换的资源标签\n\n目前 `VastSkin` 支持替换以下资源:\n\n```kotlin\ninternal const val CHANGEABLY_BACKGROUND = \"background\"\ninternal const val CHANGEABLY_SRC = \"src\"\ninternal const val CHANGEABLY_TEXT_COLOR = \"textColor\"\ninternal const val CHANGEABLY_DRAWABLE_LEFT = \"drawableLeft\"\ninternal const val CHANGEABLY_DRAWABLE_TOP = \"drawableTop\"\ninternal const val CHANGEABLY_DRAWABLE_RIGHT = \"drawableRight\"\ninternal const val CHANGEABLY_DRAWABLE_BOTTOM = \"drawableBottom\"\n```"}, "/VastDocs/document/zh/RegexUtils.html": {"title": "RegexUtils", "content": "# RegexUtils\n\n`RegexUtils` 提供了一些字符串的正则检查\n\n## 检查字符串是否为邮箱\n\n```kotlin\n\"12345678@qq.com\".isEmail()\n```\n\n## 检查字符串是否符合密码要求\n\n目前该方法支持三种类型的密码检查：\n\n1️⃣ 密码至少包含数字和字母。\n2️⃣ 密码应该包含数字、字母和字符中的两种以上。\n3️⃣ 密码至少包含数字和字母，并且可以有字符。\n\n```kotlin\n// 采用模式3 密码至少包含数字和字母，并且可以有字符\n\"123456xyz.\".isPwd(2)\n```\n\n当然你也可以指定密码的长度：\n\n```kotlin\n// 采用模式2 密码长度在5到20之间\n\"1234567.\".isPwd(1,5,20)\n```\n\n## 检查字符串是否是QQ号\n\n```kotlin\n\"123456710\".isQQ()\n```\n\n## 检查字符串是否是电话号码\n\n目前仅支持中国地区的号码验证，参考自 [2021 手机号正则表达式](https://www.jianshu.com/p/1e8eab706a63)\n\n```kotlin\n\"16612341213\".isPhoneNumber()\n```\n\n## 检查字符串是否是数字\n\n```kotlin\n\"123456789\".isNumeric()\n```"}, "/VastDocs/document/zh/NetStateUtils.html": {"title": "NetStateUtil", "content": "# NetStateUtil\n\n借助 `NetStateUtils` 你可以很方便的查看一些关于你设备的网络状态\n\n## 查看网络是否可用\n\n```kotlin\n// True为可用，否则为False\nval available = isNetworkAvailable()\n```\n\n## 查看是否处于WIFI连接\n\n```kotlin\n// True为处于WIFI连接，否则为False\nval isWifi = isWIFI()\n```\n\n## 查看是否处于手机移动网络\n\n```kotlin\n// True为处于手机网络连接，否则为False\nval isMobile = isMobile()\n```\n\n## 查看WIFI信号强度\n\n```kotlin\n// signalStrength为信号强度\nval signalStrength = getWifiDBM()\n```"}, "/VastDocs/document/zh/DensityUtils.html": {"title": "DensityUtils", "content": "# DensityUtils\n\n尺寸工具类为大家提供了一些基本的尺寸间的相互转换，关于尺寸的更多信息，你可以点击[Dimension](https://developer.android.google.cn/guide/topics/resources/more-resources?hl=zh-cn#Dimension)进行了解\n\n## px和dp之间相互转换\n\n```kotlin\nval dpValue = DensityUtils.px2dp(10f)\n\nval pxValue = DensityUtils.dp2px(10f)\n```\n\n## sp和px之间的转换\n\n```kotlin\nval spValue = DensityUtils.px2sp(10f)\n\nval pxValue = DensityUtils.sp2px(10f)\n```\n\n## sp和dp之间的转换\n\n```kotlin\nval spValue = DensityUtils.dp2sp(10f)\n\nval dpValue = DensityUtils.sp2dp(10f)\n```\n\n## 尺寸拓展方法\n\n```kotlin\nval dpValue = 10f.dp\nval spValue = 10f.sp\nval pxValue = 10f.px\nval ptValue = 10f.pt\nval mmValue = 10f.mm\nval inValue = 10f.inches\n```"}, "/VastDocs/document/zh/ColorUtils.html": {"title": "ColorUtils", "content": "# ColorUtils\n\n`ColorUtils` 为你提供了Color不同格式之间的转换方法\n\n## 颜色十六进制字符串转换为Color int\n\n```kotlin\nval colorInt = colorHex2Int(\"#12c2e9\")\n```\n\n## 颜色十六进制字符串转换为 RGB 数组\n\n```kotlin\nval rgb:IntArray = colorHex2RGB(\"#12c2e9\")\n```\n\n## 颜色 int 转换为十六进制字符串\n\n```kotlin\nval colorHex:String = colorInt2Hex(-15547671)\n```\n\n## Color int 转换为 RGB 数组\n\n```kotlin\nval rgb:IntArray = colorInt2RGB(-15547671)\n```\n\n## RGB 数组转换为颜色十六进制字符串\n\n```kotlin\nval colorHex:String = colorRGB2Hex(intArrayOf(63,226,197))\n```\n\n## RGB 数组转换为Color int\n\n```kotlin\nval colorHex:Int = colorRGB2Int(intArrayOf(63,226,197))\n```"}, "/VastDocs/document/zh/VastBaseFragment.html": {"title": "VastBaseFragment", "content": "# VastBaseFragment\n\n`VastBaseFragment` 是基于 [Fragment](https://developer.android.com/reference/androidx/fragment/app/Fragment.html) 进行封装的，同时基于 `VastBaseFragment` 又进行二次封装，如图所示：\n\n<div align=\"center\"><img src=\"../assets/images/vbf.png\"></div>\n\n## 快速使用\n\n我们以 `VastVbVmFragment` 为例，向你展示了如何将其添加到你的项目当中：\n\n```kotlin\nclass BaseVbFragment(override val layoutId: Int = 0) : VastVbVmFragment<FragmentBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        mBinding.tv.setOnClickListener {\n            ... //click event\n        }\n    }\n\n}\n```\n\n注意，在此情况下你只需要给 `layoutId` 设定为默认值 0 即可。\n\n当然，如果你的项目中没有采用 [ViewBinding](https://developer.android.com/topic/libraries/view-binding?hl=zh-cn) ，你可以继承 `VastVmFragment` ，在此情况下你需要将 `layoutId` 设定为对应的布局id，例如：\n\n```kotlin\nclass BaseVmFragment(override val layoutId: Int = R.layout.fragment_base_vm) :VastVmActivity<BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        ... //Something to do\n    }\n\n}\n```"}, "/VastDocs/document/zh/DateUtils.html": {"title": "DateUtils", "content": "# DateUtils\n\n## 支持的时间格式\n\n```kotlin\nconst val DATE_FORMAT = \"yyyy-MM-dd\"\nconst val TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\"\nconst val FORMAT_YYYY_MM = \"yyyy-MM\"\nconst val FORMAT_YYYY = \"yyyy\"\nconst val FORMAT_HH_MM = \"HH:mm\"\nconst val FORMAT_HH_MM_SS = \"HH:mm:ss\"\nconst val FORMAT_MM_SS = \"mm:ss\"\nconst val FORMAT_MM_DD_HH_MM = \"MM-dd HH:mm\"\nconst val FORMAT_MM_DD_HH_MM_SS = \"MM-dd HH:mm:ss\"\nconst val FORMAT_YYYY_MM_DD_HH_MM = \"yyyy-MM-dd HH:mm\"\nconst val FORMAT_YYYY2MM2DD = \"yyyy.MM.dd\"\nconst val FORMAT_YYYY2MM2DD_HH_MM = \"yyyy.MM.dd HH:mm\"\nconst val FORMAT_MMCDD_HH_MM = \"MM月dd日 HH:mm\"\nconst val FORMAT_MMCDD = \"MM月dd日\"\nconst val FORMAT_YYYYCMMCDD = \"yyyy年MM月dd日\"\n```\n\n## 支持的时区\n\n```kotlin\nconst val GMT_PLUS_ONE = \"GMT+01:00\"\nconst val GMT_PLUS_TWO = \"GMT+02:00\"\nconst val GMT_PLUS_THREE = \"GMT+03:00\"\nconst val GMT_PLUS_FOUR = \"GMT+04:00\"\nconst val GMT_PLUS_FIVE = \"GMT+05:00\"\nconst val GMT_PLUS_SIX = \"GMT+06:00\"\nconst val GMT_PLUS_SEVEN = \"GMT+07:00\"\nconst val GMT_PLUS_EIGHT = \"GMT+08:00\"\nconst val GMT_PLUS_NINE = \"GMT+09:00\"\nconst val GMT_PLUS_TEN = \"GMT+10:00\"\nconst val GMT_PLUS_ELEVEN = \"GMT+11:00\"\nconst val GMT_PLUS_TWELVE = \"GMT+12:00\"\nconst val GMT_MINUS_ONE = \"GMT-01:00\"\nconst val GMT_MINUS_TWO = \"GMT-02:00\"\nconst val GMT_MINUS_THREE = \"GMT-03:00\"\nconst val GMT_MINUS_FOUR = \"GMT-04:00\"\nconst val GMT_MINUS_FIVE = \"GMT-05:00\"\nconst val GMT_MINUS_SIX = \"GMT-06:00\"\nconst val GMT_MINUS_SEVEN = \"GMT-07:00\"\nconst val GMT_MINUS_EIGHT = \"GMT-08:00\"\nconst val GMT_MINUS_NINE = \"GMT-09:00\"\nconst val GMT_MINUS_TEN = \"GMT-10:00\"\nconst val GMT_MINUS_ELEVEN = \"GMT-11:00\"\nconst val GMT_MINUS_TWELVE = \"GMT-12:00\"\n```\n\n## 获取当前时间\n\n示例代码\n\n```kotlin\nLog.i(\"VU\",DateUtils.currentTime)\n```\n\n运行结果\n\n```\n// 默认按照 年月日-小时分钟秒结果\n2022-02-08 12:34:15.921 11132-11132/com.gcode.vastutils I/VU: 2022-02-08 12:34:15\n```\n\n## 获取设备当前所在时区\n\n示例代码\n\n```kotlin\nLog.i(\"VU\",DateUtils.currentTimeZone)\n```\n\n运行结果\n\n```\n2022-02-08 12:39:07.938 13174-13174/com.gcode.vastutils I/VU: GMT+08:00\n```\n\n## 获取当前最小日期的Date对象\n\n示例代码\n\n```kotlin\nval date: Date = DateUtils.minDate()\n```\n\n## 按照指定格式解析的最小日期字符串\n\n示例代码\n\n```kotlin\n// 不添加参数，则默认按照yyyy-MM-dd HH:mm:ss的格式解析\nLog.i(\"VU\",DateUtils.minDateToString())\n// 添加格式参数，只返回小时和分钟\nLog.i(\"VU\",DateUtils.minDateToString(FORMAT_HH_MM))\n```\n\n运行结果\n\n```\n// 默认格式\n2022-02-08 14:20:30.002 17203-17203/com.gcode.vastutils I/VU: 1900-02-01 14:20:30\n// 给定格式运行结果\n2022-02-08 14:18:51.090 16270-16270/com.gcode.vastutils I/VU: 14:18\n```\n\n## 根据给定的时间字符串和格式获取Date对象\n\n示例代码\n\n```kotlin\nval date: Date? = DateUtils.datetimeFromString(\"14:18\", FORMAT_HH_MM)\n```\n\n## 将给定的Date解析为时间字符串\n\n示例代码\n\n```kotlin\n// 获取一个Date对象\nval date: Date? = DateUtils.datetimeFromString(\"14:18\", FORMAT_HH_MM)\n// 在日志中打印时间字符串\nLog.i(\"VU\",DateUtils.datetimeToString(date!!, FORMAT_HH_MM_SS))\n```\n\n运行结果\n\n```\n2022-02-08 14:40:07.019 2431-2431/com.gcode.vastutils I/VU: 14:18:00\n```\n\n## 根据给定的时区和时间格式返回对应的字符串\n\n示例代码\n\n```kotlin\n// 默认情况下，按照yyyy-MM-dd HH:mm:ss和当前所处的时区获取字符串\nLog.i(\"VU\",DateUtils.dateTimeToGMT())\n// 设置时区为东六区，时间格式为yyyy.MM.dd HH:mm\nLog.i(\"VU\",DateUtils.dateTimeToGMT(GMT_PLUS_SIX,FORMAT_YYYY2MM2DD_HH_MM))\n```\n\n运行结果\n\n```kotlin\n// 默认情况下\n2022-02-08 14:51:40.894 10129-10129/com.gcode.vastutils I/VU: 2022-02-08 14:51:40\n// 设置参数\n2022-02-08 14:54:35.201 11780-11780/com.gcode.vastutils I/VU: 2022.02.08 12:54\n```\n\n## 根据给定的UTC时间和格式解析出当前时间\n\n示例代码\n\n```kotlin\nLog.i(\"VU\",DateUtils.dateTimeFromGMT(\"07:01\",FORMAT_HH_MM))\n```\n\n运行结果\n\n```\n2022-02-08 15:01:25.009 14700-14700/com.gcode.vastutils I/VU: 15:01\n```\n\n## 获取本周开始(或结束)时间，周一是第一天\n\n示例代码\n\n```kotlin\n// 获取开始时间\nLog.i(\"VU\",DateUtils.weekStartTime())\n// 获取结束时间\nLog.i(\"VU\",DateUtils.weekEndTime())\n```\n\n运行结果\n\n```\n// 开始时间\n2022-02-08 15:03:41.619 15780-15780/com.gcode.vastutils I/VU: 2022-02-07\n// 结束时间\n2022-02-08 15:05:10.837 16168-16168/com.gcode.vastutils I/VU: 2022-02-13\n```\n\n## 获取本周开始(或结束)的时间戳，周日是第一天\n\n示例代码\n\n```kotlin\n// 开始时间戳\nLog.i(\"VU\",DateUtils.getWeekStartTime())\n// 结束时间戳\nLog.i(\"VU\",DateUtils.getWeekEndTime())\n```\n\n运行结果\n\n```\n// 开始时间戳\n2022-02-08 15:08:31.918 17680-17680/com.gcode.vastutils I/VU: 2022-02-06\n// 结束时间戳\n2022-02-08 15:09:47.869 18010-18010/com.gcode.vastutils I/VU: 2022-02-12\n```"}, "/VastDocs/document/zh/VastNetStateLayout.html": {"title": "VastNetStateLayout", "content": "# VastNetStateLayout\n\n## 布局使用\n\n```xml\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".activity.NetStateActivity\">\n    <com.gcode.vastnetstatelayout.view.VastNetStateLayout\n        android:id=\"@+id/net_state_layout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <!--页面其他内容-->\n    </com.gcode.vastnetstatelayout.view.VastNetStateLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n## 切换页面状态\n\nVastNetStateLayout为你提供了**四**种页面状态供你切换使用\n\n```kotlin\n// 展示网络加载页面\nnetStateLayout.showLoading()\n// 展示网络加载错误页面\nnetStateLayout.showLoadingError()\n// 展示空数据页面\nnetStateLayout.showEmptyData()\n// 展示网络错误页面\nnetStateLayout.showNetError()\n```\n\n当加载成功时，你可以使用下列方式来显示正确的页面\n\n```kotlin\nnetStateLayout.showSuccess()\n```\n\n## 设置页面事件\n\nVastNetStateLayout允许你自定义页面点击事件\n\n### 针对网络错误状态\n\n```kotlin\nvastNetStateMgr.setNetErrorListener(object :VastNetErrorListener{\n    override fun onNetWorkError() {\n        // Something to do when network error\n    }\n})\n```\n\n### 针对空数据状态\n\n```kotlin\nvastNetStateMgr.setEmptyDataListener(object :VastEmptyDataListener{\n    override fun onEmptyData() {\n        // Something to do when empty data\n    }\n})\n```\n\n### 针对加载错误状态\n\n```kotlin\nvastNetStateMgr.setLoadingErrorListener(object :VastLoadingErrorListener{\n    override fun onLoadingError() {\n        // Something to do when loading error\n    }\n})\n```\n\n### 针对加载状态\n\n```kotlin\nvastNetStateMgr.setLoadingListener(object : VastLoadingListener {\n    override fun onLoading() {\n        // Something to do when loading\n    }\n})\n```\n\n## 自定义页面背景\n\nVastNetStateLayout允许你自定义状态页面，我们以自定义网络错误页面为示例\n\n```kotlin\nvastNetStateMgr.setNetErrorView(R.layout.error_page)\n```"}, "/VastDocs/document/zh/IntentUtils.html": {"title": "IntentUtils", "content": "# IntentUtils\n\n`IntentUtils` 为你提供了一些常见 [Intent](https://developer.android.com/guide/components/intents-common?hl=zh-cn) 的快捷启动\n\n注意：如果你的设备是Android 11(API>=30)，你应该在清单中做出如下声明，否则可能会找不到对应的Activity。例如：\n\n```xml\n<queries>\n    <intent>\n        <action android:name=\"android.intent.action.DIAL\"/>\n    </intent>\n</queries>\n```\n\n## 快速开始\n\n```kotlin\n// 拨打电话\ncallBtn.setOnClickListener {\n    dialPhoneNumber(\"12345678910\")\n}\n\n// 搜索给定字段\nsearchWeb.setOnClickListener {\n    searchWeb(\"12345678910\")\n}\n\n// 打开指定链接\nopenWebPage.setOnClickListener {\n    openWebPage(\"http://www.baidu.com\")\n}\n\n// 发送短信\nsendMmsMessage.setOnClickListener {\n    sendMmsMessage(\"123456\",\"1238489\")\n}\n\n// 发送邮件\nsendEmail.setOnClickListener {\n    openEmail(arrayOf(\"1550651926@qq.com\"))\n}\n\n// 创建闹钟\ncreateAlarm.setOnClickListener {\n    createAlarm(\"你好\",12,30)\n}\n\n// 打开WIFI设置\nwifiSetting.setOnClickListener {\n    openWirelessSettings()\n}\n```"}, "/VastDocs/document/zh/VastBindAdapter.html": {"title": "VastBindAdapter", "content": "# VastBindAdapter\n\n## 快速开始\n\n通过下面的示例，你可以快速将 `VastBindAdapter` 运用到你的项目当中。\n\n### 实现 VastBindAdapterItem 接口\n\n你需要让你列表项实现 `VastBindAdapterItem` 接口， `VastBindAdapterItem` 接口提供了事件点击和获取布局id的功能。\n\n```kotlin\n// 在Kotlin中使用\nclass Person(\n    val firstName: String, val lastName: String,\n    var vbAdpClickEventListener: VAapClickEventListener? = null,\n    var vbAdpLongClickEventListener: VAdpLongClickEventListener? = null,\n) :VastBindAdapterItem {\n\n    override fun setVBAapClickEventListener(l: VAapClickEventListener?) {\n        vbAdpClickEventListener = l\n    }\n\n    override fun getVBAapClickEventListener(): VAapClickEventListener? {\n        return vbAdpClickEventListener\n    }\n\n    override fun setVBAdpLongClickEventListener(l: VAdpLongClickEventListener?) {\n        vbAdpLongClickEventListener = l\n    }\n\n    override fun getVBAdpLongClickEventListener(): VAdpLongClickEventListener? {\n        return vbAdpLongClickEventListener\n    }\n\n    override fun getVBAdpItemType(): Int {\n        return R.layout.item_bind_textview\n    }\n\n}\n```\n\n```java\n// 在Java中使用\n// 你需要重写以下方法\npublic class Picture implements VastBindAdapterItem {\n\n    private int drawable;\n    private VAapClickEventListener clickEventListener;\n    private VAdpLongClickEventListener longClickEventListener;\n\n    public Picture(int drawable, VAapClickEventListener clickEventListener, VAdpLongClickEventListener longClickEventListener) {\n        this.drawable = drawable;\n        this.clickEventListener = clickEventListener;\n        this.longClickEventListener = longClickEventListener;\n    }\n\n    public int getDrawable() {\n        return drawable;\n    }\n\n    public void setDrawable(int drawable) {\n        this.drawable = drawable;\n    }\n    \n    @Override\n    public int getVBAdpItemType() {\n        return R.layout.item_bind_imageview;\n    }\n\n    @Override\n    public void setVBAapClickEventListener(@Nullable VAapClickEventListener l) {\n        clickEventListener = l;\n    }\n\n    @Nullable\n    @Override\n    public VAapClickEventListener getVBAapClickEventListener() {\n        return clickEventListener;\n    }\n\n    @Override\n    public void setVBAdpLongClickEventListener(@Nullable VAdpLongClickEventListener l) {\n        longClickEventListener = l;\n    }\n\n    @Nullable\n    @Override\n    public VAdpLongClickEventListener getVBAdpLongClickEventListener() {\n        return longClickEventListener;\n    }\n}\n```\n\n### 编辑对应的layout\n\n对于同一列表内的元素，当你使用 `data` 标签将他们绑定进对应的布局时，他们的 `name` 字段应该是一样的。\n\n例如：`Person` 和 `Picture` 在同一列表中，他们的布局文件内 `name` 字段均为 `item` 。\n\n```xml\n// Person对应的layout\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <data>\n        <variable\n            name=\"item\"\n            type=\"com.gcode.vastutils.basebindadpexample.model.Person\" />\n    </data>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"center\"\n            android:text=\"@{item.firstName}\"/>\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"center\"\n            android:text=\"@{item.lastName}\"/>\n    </LinearLayout>\n</layout>\n```\n\n```xml\n// Picture对应的layout\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <data>\n        <variable\n            name=\"item\"\n            type=\"com.gcode.vastutils.basebindadpexample.model.Picture\" />\n    </data>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n        <ImageView\n            android:id=\"@+id/item_image\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"100dp\"\n            android:src=\"@{item.drawable}\"\n            android:contentDescription=\"@string/picture\"\n            android:layout_gravity=\"center_horizontal\"/>\n    </LinearLayout>\n</layout>\n```\n\n### 实现Adapter\n\n```kotlin\n// 在Kotlin中使用\nclass BaseBindingAdapter(\n    private val dataSource:MutableList<VastBindAdapterItem>\n):BaseVastBindAdapter(dataSource){\n\n    override fun setVariableId(): Int {\n        return BR.item\n    }\n\n}\n```\n\n```java\n// 在Java中使用\npublic class BaseBindAdapter extends VastBindAdapter {\n    public BaseBindAdapter(@NonNull List<VastBindAdapterItem> dataSource) {\n        super(dataSource);\n    }\n\n    @Override\n    public int setVariableId() {\n        return BR.item;\n    }\n}\n```\n\n### 在Activity中使用\n\n下面的示例展示了在 Kotlin 和 Java 环境下的使用\n\n```kotlin\n// 在Kotlin中使用\nprivate val datas:MutableList<VastBindAdapterItem> = ArrayList()\n\nfor(i in 0..10){\n    datas.add(Person(i.toString(),i.toString(),null,null))\n    datas.add(Picture(R.drawable.ic_knots,null,null))\n}\n\n// 设置给RecyclerView\nval adapter = BaseBindingAdapter(datas)\ndataRv.adapter = adapter\ndataRv.layoutManager = LinearLayoutManager(this)\n```\n\n```java\n// 在java中使用\nprivate ArrayList<VastBindAdapterItem> datas = new ArrayList<>();\n\nfor (int i = 0; i < 10; i++) {\n    datas.add(new Picture(R.drawable.ic_knots, null, null));\n}\n\n// 设置给RecyclerView\nBaseBindAdapter adapter = new BaseBindAdapter(datas);\ndataRv.setAdapter(adapter);\ndataRv.setLayoutManager(new LinearLayoutManager(this));\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapter.gif\" width=50%/></div>\n\n## 添加点击（或长按）事件\n\n对于列表来说，点击事件是必不可少的，`VastBindAdapter` 支持你为列表设置通用点击事件，当然因为你的类实现了 `VastBindAdapterItem` 接口，因此你也可以单独为其设定点击事件。\n\n### 通用点击事件设置\n\n```kotlin\n// 在Kotlin中使用\nadapter.setOnItemClickListener(object :VastBindAdapter.OnItemClickListener{\n            override fun onItemClick(view: View, position: Int) {\n                // Something you want to do\n            }\n        })\nadapter.setOnItemLongClickListener(object :VastBindAdapter.OnItemLongClickListener{\n            override fun onItemLongClick(view: View, position: Int): Boolean {\n                // Something you want to do\n                return true\n            }\n        })\n```\n\n```java\n// 在java中使用\nadapter.setOnItemClickListener((view, position) -> {\n            // Something you want to do\n        });\nadapter.setOnItemLongClickListener((view, position) -> {\n            // Something you want to do\n            return true;\n        });\n```\n\n### 设置单独点击事件\n\n注意，如果你为某一项单独定义了点击事件，那么他不再支持通用点击事件。\n\n```kotlin\n// 在Kotlin中使用\n// 定义点击事件\nval click = object :VAapClickEventListener{\n    override fun vAapClickEvent(view: View, pos: Int) {\n        showShortMsg(\"Hello,User.And position is $pos\")\n    }\n}\n\n// 在设置数据源的时候设置\nfor(i in 0..10){\n    datas.add(Person(i.toString(),i.toString(),click,null))\n    datas.add(Picture(R.drawable.ic_knots,null,longClick))\n}\n```\n\n```java\n// 在java中使用\n// 定义点击事件\nVAapClickEventListener click = (view, pos) -> {\n    ToastUtils.showShortMsg(this,\"Hello\");\n};\n\n// 在设置数据源的时候设置\nfor (int i = 0; i < 10; i++) {\n    datas.add(new Picture(R.drawable.ic_knots, click, null));\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapterClick.gif\" width=50%/></div>\n\n## 为Adapter添加其他功能\n\n下面的示例向你展示了为Adapter增加判断数据源是否为空的功能\n\n```kotlin\n// 在kotlin中使用\nclass BaseBindingAdapter(\n    private val dataSource:MutableList<VastBindAdapterItem>\n):BaseVastBindAdapter(dataSource) {\n\n    /**\n     * 如果集合为空（不包含任何元素），则返回true，否则返回false。\n     * @return Boolean\n     */\n    fun isItemEmpty() = items.isEmpty()\n\n    override fun setVariableId(): Int {\n        return BR.item\n    }\n\n}\n```\n\n```java\n// 在java中使用\npublic class BaseBindAdapter extends VastBindAdapter {\n    private ArrayList<VastBindAdapterItem> datas;\n\n    public BaseBindAdapter(@NonNull List<VastBindAdapterItem> dataSource) {\n        super(dataSource);\n        datas.addAll(dataSource);\n    }\n\n    @Override\n    public int setVariableId() {\n        return BR.item;\n    }\n\n    public Boolean isEmpty(){\n        return datas.isEmpty();\n    }\n\n}\n```\n\n当然你也可以参考示例应用\n\n## 绑定适配器使用\n\n在使用 `DataBinding` 时，我们有时需要自定义一些内容，下面的示例为你演示了如何在 `VastBindAdapter` 里面使用 `@BindingAdapter` 。\n\n当然，如果你想了解更多，你可以点击[绑定适配器](https://developer.android.google.cn/topic/libraries/data-binding/binding-adapters)了解更多。\n\n```kotlin\nclass BaseBindingAdapter(\n    private val dataSource:MutableList<VastBindAdapterItem>\n):BaseVastBindAdapter(dataSource) {\n    companion object {\n        @JvmStatic @BindingAdapter(\"android:src\")\n        fun setImageUri(view: ImageView, imageUri: String?) {\n            if (imageUri == null) {\n                view.setImageURI(null)\n            } else {\n                view.setImageURI(Uri.parse(imageUri))\n            }\n        }\n    }\n\n    override fun setVariableId(): Int {\n        return BR.item\n    }\n\n}\n```\n\n```java\npublic class BaseBindAdapter extends VastBindAdapter {\n\n    @BindingAdapter(\"drawableStartCompat\")\n    public static void loadImage(TextView tv, int resId) {\n        Drawable drawable = ResourcesCompat.getDrawable(App.context.getResources(),resId,null);\n        tv.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);\n    }\n    \n    private ArrayList<VastBindAdapterItem> datas;\n\n    public BaseBindAdapter(@NonNull List<VastBindAdapterItem> dataSource) {\n        super(dataSource);\n        datas.addAll(dataSource);\n    }\n\n    @Override\n    public int setVariableId() {\n        return BR.item;\n    }\n\n    public Boolean isEmpty(){\n        return datas.isEmpty();\n    }\n\n}\n```"}, "/VastDocs/document/zh/VastAdapters.html": {"title": "", "content": "<h1 align=\"center\">VastAdapter</h1>\n\n## 💫 特性\n\n- 👍 支持有DataBinding和无DataBinding两种模式\n- 👍 支持多种数据类型\n- 👍 支持为不同数据类型添加不同的点击事件\n- 👍 支持点击和长按两种事件\n- 👍 支持快速添加新的数据类型"}, "/VastDocs/document/zh/VastTools.html": {"title": "", "content": "<h1 align=\"center\">VastTools</h1>\n\n## 💫 特性\n\n- 👍 `AppUtils` 支持获取应用程序名、当前版本名、应用版本号、应用包名、应用图标、应用Debug状态。\n- 👍 `Bean` 高频率使用的Bean。\n- 👍 `ColorUtils` 为你提供了Color不同格式之间的转换的方法。\n- 👍 `DateUtils` 支持获取日期等相关信息，详情可以 [点击这里](https://juejin.cn/post/7029336437493350407) 。\n- 👍 `DensityUtils` 提供了dp px sp之间的相互转换，同时也支持 `56f.sp` 。\n- 👍 `IDCardUtils` 主要用于在本地验证中国居民身份证的正确性。\n- 👍 `IntentUtils` 提供了常用的 [Intent](https://developer.android.com/guide/components/intents-common?hl=zh-cn) ，例如`拨打电话，打开网页。\n- 👍 `LogUtils` 提供了日志打印工具，详情可以 [点击这里](https://juejin.cn/post/7027420579607248932) 。\n- 👍 `MergeBmpUtils` 提供了 [Bitmap](https://developer.android.com/reference/kotlin/android/graphics/Bitmap?hl=en) 合并方法。\n- 👍 `NetStateUtils` 用来检查设备网络状态。\n- 👍 `RegexUtils` 提供了一些字符串的正则检查。\n- 👍 `ScreenSizeUtils` 为你提供了获取屏幕长宽的方法。\n- 👍 `ShapeAndStateUtils` 是对 [GradientDrawable](https://developer.android.google.cn/reference/android/graphics/drawable/GradientDrawable?hl=en) 进行了封装，不必每次使用都需要创建shape.xml 。\n- 👍 `SystemUtils` 提供了获取系统信息的方法。\n- 👍 `ToastUtils` 提供了两种常用消息提示框Short Toast，Long Toast 。\n- 👍 `VastBaseActivity` 是基于 [AppCompatActivity](https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity) 进行封装的，便于你快速使用 Activity 。\n- 👍 `VastBaseFragment` 是基于 [Fragment](https://developer.android.com/reference/androidx/fragment/app/Fragment.html) 进行封装的，便于你快速使用 Fragment 。"}, "/VastDocs/document/zh/MergeBmpUtils.html": {"title": "MergeBmpUtils", "content": "# MergeBmpUtils\n\n`MergeBmpUtils` 主要为你提供了合并 [Bitmap](https://developer.android.com/reference/kotlin/android/graphics/Bitmap?hl=en) 的一些方法\n\n## 把两个位图覆盖合成为一个位图，以底层位图的长宽为基准\n\n```kotlin\niv.setImageBitmap(mergeBmp(getAppBitmap(this)!!,bitmap))\n```\n\n运行结果如下\n\n<div align=\"center\"><img src=\"../assets/images/mergeBmp.jpg\" width=\"40%\"></div>\n\n## 把两个位图覆盖合成为一个位图，左右拼接\n\n```kotlin\n// iv是一个ImageView控件\n// 我们使用AppInfoUtils里面的方法获取应用Bmp图标\niv.setImageBitmap(mergeBmpLR(getAppBitmap(this)!!,getAppBitmap(this)!!,true))\n```\n\n运行结果如下\n\n<div align=\"center\"><img src=\"../assets/images/mergeBmpLR.jpg\" width=\"40%\"></div>\n\n## 把两个位图覆盖合成为一个位图，上下拼接\n\n```kotlin\n// iv是一个ImageView控件\n// 我们使用AppInfoUtils里面的方法获取应用Bmp图标\niv.setImageBitmap(mergeBmpTB(getAppBitmap(this)!!,getAppBitmap(this)!!,true))\n```\n\n运行结果如下\n\n<div align=\"center\"><img src=\"../assets/images/mergeBmpTB.jpg\" width=\"40%\"></div>"}, "/VastDocs/document/zh/SystemUtils.html": {"title": "SystemUtils", "content": "# SystemUtils\n\n`SystemUtils` 为你提供了获取系统信息的一些方法\n\n## 获取系统语言\n\n```kotlin\nLogUtils.i(\"VU\", systemLanguage)\n```\n\n运行结果\n\n```kotlin\n2022-02-10 22:06:24.272 24641-24641/com.gcode.vastutils I/class (MainActivity.kt:52): zh\n```\n\n## 返回所有已安装语言环境的数组\n\n```kotlin\nfor(locale in systemLanguageList){\n    // to do something\n}\n```\n\n## 返回系统的安卓版本\n\n```kotlin\nLogUtils.i(\"VU\", systemAndroidVersion)\n```\n\n运行结果\n\n```kotlin\n2022-02-10 22:12:03.397 29894-29894/com.gcode.vastutils I/class (MainActivity.kt:52): 12\n```\n\n## 返回最终产品的最终用户可见名称\n\n```kotlin\n// 该设备是REDMI K40\n2022-02-10 22:15:53.820 4584-4584/com.gcode.vastutils I/class (MainActivity.kt:52): M2012K11AC\n```\n\n## 返回与产品/硬件相关联的消费者可见品牌（如果有）\n\n```kotlin\nLogUtils.i(\"VU\", deviceBrand)\n```\n\n运行结果\n\n```kotlin\n2022-02-10 22:17:47.494 6086-6086/com.gcode.vastutils I/class (MainActivity.kt:52): Redmi\n```"}, "/VastDocs/document/zh/AppUtils.html": {"title": "AppUtils", "content": "# AppUtils\n\n用来获取和App有关的相关信息\n\n## 获取应用包名\n\n示例代码\n\n```kotlin\nLog.i(\"VU\",getPackageName(this)?: \"\")\n```\n\n运行结果\n\n```\n2022-02-08 12:15:42.888 28668-28668/com.gcode.vastutils I/VU: com.gcode.vastutils\n```\n\n## 获取应用名\n\n示例代码\n\n```kotlin\nLog.i(\"VU\",getAppName(this)?: \"\")\n```\n\n运行结果\n\n```\n2022-02-08 12:16:34.509 29223-29223/com.gcode.vastutils I/VU: VastUtilsSampleDemo\n```\n\n## 获取版本名\n\n示例代码\n\n```kotlin\nLog.i(\"VU\",getVersionName(this)?: \"\")\n```\n\n运行结果\n\n```\n2022-02-08 12:21:32.561 586-586/com.gcode.vastutils I/VU: 1.0\n```\n\n## 获取版本号\n\n示例代码\n\n```kotlin\nLog.i(\"VU\", getVersionCode(this).toString())\n```\n\n运行结果\n\n```\n2022-02-08 12:24:11.924 6275-6275/com.gcode.vastutils I/VU: 1\n```\n\n## 判断应用是否是Debug状态\n\n示例代码\n\n```kotlin\nLog.i(\"VU\", getAppDebug(this).toString())\n```\n\n运行结果\n\n```\n2022-02-08 12:24:48.678 7578-7578/com.gcode.vastutils I/VU: true\n```\n\n## 获取应用图标\n\n```kotlin\n// iv是一个imageView控件\niv.setImageBitmap(getAppBitmap(this))\n```\n\n## build.gradle配置\n\n```groovy\ndefaultConfig {\n  applicationId \"com.gcode.vastutils\"\n  ... //sdk version\n  versionCode 1\n  versionName \"1.0\"\n\n  testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n}\n```"}, "/VastDocs/document/zh/VastAdapter.html": {"title": "VastAdapter", "content": "# VastAdapter\n\n> 如果可以的话，还是推荐使用**BaseVastBindingAdapter**\n\n## 快速开始\n\n通过下面的示例，你可以快速的将 `VastAdapter` 运用到你的项目当中\n\n### 实现 VastAdapterItem` 接口\n\n我们以 `AExample` 和 `BExample` 为例:\n\n```kotlin\n// getVAdpItemType 方法返回值应该与对应的VH相同\nclass AExample(\n    val data: String,\n    var clickEventListener: VAapClickEventListener?,\n    var longClickEventListener: VAdpLongClickEventListener?,\n):VastAdapterItem {\n\n    override fun setVAapClickEventListener(l: VAapClickEventListener?) {\n        clickEventListener = l\n    }\n\n    override fun getVAapClickEventListener(): VAapClickEventListener? {\n        return clickEventListener\n    }\n\n    override fun setVAdpLongClickEventListener(l: VAdpLongClickEventListener?) {\n        longClickEventListener = l\n    }\n\n    override fun getVAdpLongClickEventListener(): VAdpLongClickEventListener? {\n        return longClickEventListener\n    }\n\n    override fun getVAdpItemType(): String {\n        return \"person\"\n    }\n}\n\nclass BExample(\n    val drawable:Int,\n    var clickEventListener: VAapClickEventListener?,\n    var longClickEventListener: VAdpLongClickEventListener?\n) : VastAdapterItem {\n\n    override fun setVAapClickEventListener(l: VAapClickEventListener?) {\n        clickEventListener = l\n    }\n\n    override fun getVAapClickEventListener(): VAapClickEventListener? {\n        return clickEventListener\n    }\n\n    override fun setVAdpLongClickEventListener(l: VAdpLongClickEventListener?) {\n        longClickEventListener = l\n    }\n\n    override fun getVAdpLongClickEventListener(): VAdpLongClickEventListener? {\n        return longClickEventListener\n    }\n\n    override fun getVAdpItemType(): String {\n        return \"picture\"\n    }\n}\n```\n\n### 设置对应的ViewHolder，ViewHolder需要继承自BaseVastAdapterVH\n\n```kotlin\n// AExample对应的VH\nclass AViewHolder(itemView: View): BaseVastAdapterVH(itemView) {\n    private val tv:TextView\n\n    override fun onBindData(item: VastAdapterItem) {\n        super.onBindData(item)\n        tv.text = (item as AExample).data\n    }\n\n    class Factory:BVAdpVHFactory{\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseVastAdapterVH {\n            return AViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_textview,parent,false))\n        }\n\n        override fun getVAdpVHType(): String {\n            return \"person\" // 和Item相一致\n        }\n    }\n\n    init {\n        tv = itemView.findViewById(R.id.text)\n    }\n}\n\n// BExample对应的VH\nclass BViewHolder(itemView: View) : BaseVastAdapterVH(itemView) {\n\n    private val iv: ImageView\n\n    override fun onBindData(item: VastAdapterItem) {\n        super.onBindData(item)\n        iv.setImageResource((item as BExample).drawable)\n    }\n\n    class Factory : BVAdpVHFactory {\n\n        override fun onCreateViewHolder(\n            parent: ViewGroup,\n            viewType: Int\n        ): BaseVastAdapterVH {\n            val inflater = LayoutInflater.from(parent.context)\n            val itemView: View = inflater.inflate(R.layout.item_imageview, parent, false)\n            return BViewHolder(itemView)\n        }\n\n        override fun getVAdpVHType(): String {\n            return \"picture\"\n        }\n\n    }\n\n    init {\n        iv = itemView.findViewById(R.id.item_image)\n    }\n}\n```\n\n### 实现Adapter\n\n```kotlin\nclass BaseAdapter(\n    private val items: MutableList<VastAdapterItem>,\n    factories: MutableList<BaseVastAdapterVH.BVAdpVHFactory>\n) : BaseVastAdapter(items, factories)\n```\n\n### 在Activity中使用\n\n```kotlin\n// 获取数据源\nprivate val datas:MutableList<VastAdapterItem> = ArrayList()\n\nfor(i in 0..10){\n    datas.add(AExample(i.toString(),null,null))\n    datas.add(BExample(R.drawable.ic_knots,null,null))\n}\n\n// 设置给RecyclerView\nadapter = BaseAdapter(datas, mutableListOf(AViewHolder.Factory(), BViewHolder.Factory()))\n\n// dataRv是RecyclerView\ndataRv.adapter = adapter\ndataRv.layoutManager = LinearLayoutManager(this)\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapter.gif\" width=50%/></div>\n\n## 添加点击（或长按）事件\n\n对于列表来说，点击事件是必不可少的，`VastAdapter` 支持你为列表设置通用点击事件，当然因为你的类实现了 `VastAdapterItem` 接口，因此你也可以单独为其设定点击事件。\n\n### 通用点击事件设置\n\n```kotlin\nadapter.setOnItemClickListener(object :VastAdapter.OnItemClickListener{\n            override fun onItemClick(view: View, position: Int) {\n                // Something you want to do\n            }\n        })\nadapter.setOnItemLongClickListener(object:VastAdapter.OnItemLongClickListener{\n            override fun onItemLongClick(view: View, position: Int): Boolean {\n                // Something you want to do\n                return true\n            }\n        })\n```\n\n### 设置单独点击事件\n\n注意，如果你为某一项单独定义了点击事件，那么他不再支持通用点击事件。\n\n```kotlin\n// 设置点击事件\nprivate val click = object :VAapClickEventListener{\n        override fun vAapClickEvent(view: View, pos: Int) {\n            showShortMsg(\"Click event and pos is $pos.\")\n        }\n    }\n\n// 设置长按事件\nprivate val longClick = object :VAdpLongClickEventListener{\n        override fun vAdpLongClickEvent(view: View, pos: Int): Boolean {\n            showShortMsg(\"Long click event and pos is $pos.\")\n            return true\n        }\n    }\n\n// 在设置数据源的时候设置\nfor(i in 0..10){\n    datas.add(AExample(i.toString(),click,null))\n    datas.add(BExample(R.drawable.ic_knots,null,longClick))\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/VastAdapterClick.gif\" width=50%/></div>\n\n## 添加新的数据类型\n\n如果你想向列表中添加第三种类型的数据，你只需要以下三步：\n\n- 定义新的数据类型，例如**CExample**，并使其实现**VastAdapterItem**接口\n\n- 定义**CExample**对应的ViewHolder，例如**CViewHolder**\n\n- 将其对应的**Factory**添加到adapter中\n  \n  ```kotlin\n  adapter = BaseAdapter(datas, mutableListOf(AViewHolder.Factory(), BViewHolder.Factory() ,CViewHolder.Factory()))\n  ```\n\n## 为Adapter添加其他功能\n\n下面的示例向你展示了为Adapter增加判断数据源是否为空的功能\n\n```kotlin\nclass BaseAdapter(\n    private val items: MutableList<VastAdapterItem>,\n    factories: MutableList<BaseVastAdapterVH.BVAdpVHFactory>\n) : BaseVastAdapter(items, factories) {\n\n    /**\n     * 如果集合为空（不包含任何元素），则返回true，否则返回false。\n     * @return Boolean\n     */\n    fun isItemEmpty() = items.isEmpty()\n}\n```\n\n当然你也可以参考示例应用\n\n## 引用\n\nBaseVastAdapter部分设计参考自[彻底解耦 RecyclerView.Adapter](https://puke3615.github.io/2018/08/26/Android-RecyclerView-Architecture-Design/)"}, "/VastDocs/document/zh/VastBaseActivity.html": {"title": "VastBaseActivity", "content": "# VastBaseActivity\n\n`VastBaseActivity` 是基于 [AppCompatActivity](https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity) 进行封装的，同时基于 `VastBaseActivity` 又进行二次封装，如图所示：\n\n<div align=\"center\"><img src=\"../assets/images/vba.png\"></div>\n\n## 快速使用\n\n我们以 `VastVbVmActivity` 为例，你无需去手动初始化 `ViewBinding` 和 `ViewModel`\n\n下面展示了基本使用\n\n```kotlin\nclass BaseVbActivity : VastVbVmActivity<ActivityBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n\n        mBinding.addOne.setOnClickListener {\n            mViewModel.addOne()\n        }\n\n        mViewModel.count.observe(this){\n            mBinding.count.text = it.toString()\n        }\n\n    }\n\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/vba_eg_1.gif\" width=\"40%\"></div>\n\n## 隐藏ActionBar\n\n```kotlin\nclass BaseVbActivity : VastVbVmActivity<ActivityBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        enableActionBar = false // 不显示ActionBar\n        ... // 其他设置\n    }\n\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/vba_eg_2.jpg\" width=\"40%\"></div>\n\n## 启动全面屏模式\n\n```kotlin\nclass BaseVbActivity : VastVbVmActivity<ActivityBaseVbBinding, BaseVM>() {\n\n    override fun initView(savedInstanceState: Bundle?) {\n        enableFullScreen = true // 启用全面屏\n        ... // 其他设置\n    }\n\n}\n```\n\n<div align=\"center\"><img src=\"../assets/images/vba_eg_3.jpg\" width=\"40%\"></div>"}}